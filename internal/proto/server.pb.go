// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.20.1
// source: server.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Faction int32

const (
	Faction_UNKNOWN_FACTION Faction = 0
	Faction_COSMIC          Faction = 1
	Faction_VOID            Faction = 2
	Faction_GALACTIC        Faction = 3
	Faction_QUANTUM         Faction = 4
	Faction_DOMINION        Faction = 5
	Faction_ASTRO           Faction = 6
	Faction_CORSAIRS        Faction = 7
	Faction_OBSIDIAN        Faction = 8
	Faction_AEGIS           Faction = 9
	Faction_UNITED          Faction = 10
	Faction_SOLITARY        Faction = 11
	Faction_COBALD          Faction = 12
	Faction_OMEGA           Faction = 13
	Faction_ECHO            Faction = 14
	Faction_LORDS           Faction = 15
	Faction_CULT            Faction = 16
	Faction_ANCIENTS        Faction = 17
	Faction_SHADOW          Faction = 18
	Faction_ETHEREAL        Faction = 19
)

// Enum value maps for Faction.
var (
	Faction_name = map[int32]string{
		0:  "UNKNOWN_FACTION",
		1:  "COSMIC",
		2:  "VOID",
		3:  "GALACTIC",
		4:  "QUANTUM",
		5:  "DOMINION",
		6:  "ASTRO",
		7:  "CORSAIRS",
		8:  "OBSIDIAN",
		9:  "AEGIS",
		10: "UNITED",
		11: "SOLITARY",
		12: "COBALD",
		13: "OMEGA",
		14: "ECHO",
		15: "LORDS",
		16: "CULT",
		17: "ANCIENTS",
		18: "SHADOW",
		19: "ETHEREAL",
	}
	Faction_value = map[string]int32{
		"UNKNOWN_FACTION": 0,
		"COSMIC":          1,
		"VOID":            2,
		"GALACTIC":        3,
		"QUANTUM":         4,
		"DOMINION":        5,
		"ASTRO":           6,
		"CORSAIRS":        7,
		"OBSIDIAN":        8,
		"AEGIS":           9,
		"UNITED":          10,
		"SOLITARY":        11,
		"COBALD":          12,
		"OMEGA":           13,
		"ECHO":            14,
		"LORDS":           15,
		"CULT":            16,
		"ANCIENTS":        17,
		"SHADOW":          18,
		"ETHEREAL":        19,
	}
)

func (x Faction) Enum() *Faction {
	p := new(Faction)
	*p = x
	return p
}

func (x Faction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Faction) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[0].Descriptor()
}

func (Faction) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[0]
}

func (x Faction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Faction.Descriptor instead.
func (Faction) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

type TradeItem int32

const (
	TradeItem_UNKNOWN_TRADEITEM          TradeItem = 0
	TradeItem_PRECIOUS_STONES            TradeItem = 1
	TradeItem_QUARTZ_SAND                TradeItem = 2
	TradeItem_SILICON_CRYSTALS           TradeItem = 3
	TradeItem_AMMONIA_ICE                TradeItem = 4
	TradeItem_LIQUID_HYDROGEN            TradeItem = 5
	TradeItem_LIQUID_NITROGEN            TradeItem = 6
	TradeItem_ICE_WATER                  TradeItem = 7
	TradeItem_EXOTIC_MATTER              TradeItem = 8
	TradeItem_ADVANCED_CIRCUITRY         TradeItem = 9
	TradeItem_GRAVITON_EMITTERS          TradeItem = 10
	TradeItem_IRON                       TradeItem = 11
	TradeItem_IRON_ORE                   TradeItem = 12
	TradeItem_COPPER                     TradeItem = 13
	TradeItem_COPPER_ORE                 TradeItem = 14
	TradeItem_ALUMINUM                   TradeItem = 15
	TradeItem_ALUMINUM_ORE               TradeItem = 16
	TradeItem_SILVER                     TradeItem = 17
	TradeItem_SILVER_ORE                 TradeItem = 18
	TradeItem_GOLD                       TradeItem = 19
	TradeItem_GOLD_ORE                   TradeItem = 20
	TradeItem_PLATINUM                   TradeItem = 21
	TradeItem_PLATINUM_ORE               TradeItem = 22
	TradeItem_DIAMONDS                   TradeItem = 23
	TradeItem_URANITE                    TradeItem = 24
	TradeItem_URANITE_ORE                TradeItem = 25
	TradeItem_MERITIUM                   TradeItem = 26
	TradeItem_MERITIUM_ORE               TradeItem = 27
	TradeItem_HYDROCARBON                TradeItem = 28
	TradeItem_ANTIMATTER                 TradeItem = 29
	TradeItem_FAB_MATS                   TradeItem = 30
	TradeItem_FERTILIZERS                TradeItem = 31
	TradeItem_FABRICS                    TradeItem = 32
	TradeItem_FOOD                       TradeItem = 33
	TradeItem_JEWELRY                    TradeItem = 34
	TradeItem_MACHINERY                  TradeItem = 35
	TradeItem_FIREARMS                   TradeItem = 36
	TradeItem_ASSAULT_RIFLES             TradeItem = 37
	TradeItem_MILITARY_EQUIPMENT         TradeItem = 38
	TradeItem_EXPLOSIVES                 TradeItem = 39
	TradeItem_LAB_INSTRUMENTS            TradeItem = 40
	TradeItem_AMMUNITION                 TradeItem = 41
	TradeItem_ELECTRONICS                TradeItem = 42
	TradeItem_SHIP_PLATING               TradeItem = 43
	TradeItem_SHIP_PARTS                 TradeItem = 44
	TradeItem_EQUIPMENT                  TradeItem = 45
	TradeItem_FUEL                       TradeItem = 46
	TradeItem_MEDICINE                   TradeItem = 47
	TradeItem_DRUGS                      TradeItem = 48
	TradeItem_CLOTHING                   TradeItem = 49
	TradeItem_MICROPROCESSORS            TradeItem = 50
	TradeItem_PLASTICS                   TradeItem = 51
	TradeItem_POLYNUCLEOTIDES            TradeItem = 52
	TradeItem_BIOCOMPOSITES              TradeItem = 53
	TradeItem_QUANTUM_STABILIZERS        TradeItem = 54
	TradeItem_NANOBOTS                   TradeItem = 55
	TradeItem_AI_MAINFRAMES              TradeItem = 56
	TradeItem_QUANTUM_DRIVES             TradeItem = 57
	TradeItem_ROBOTIC_DRONES             TradeItem = 58
	TradeItem_CYBER_IMPLANTS             TradeItem = 59
	TradeItem_GENE_THERAPEUTICS          TradeItem = 60
	TradeItem_NEURAL_CHIPS               TradeItem = 61
	TradeItem_MOOD_REGULATORS            TradeItem = 62
	TradeItem_VIRAL_AGENTS               TradeItem = 63
	TradeItem_MICRO_FUSION_GENERATORS    TradeItem = 64
	TradeItem_SUPERGRAINS                TradeItem = 65
	TradeItem_LASER_RIFLES               TradeItem = 66
	TradeItem_HOLOGRAPHICS               TradeItem = 67
	TradeItem_SHIP_SALVAGE               TradeItem = 68
	TradeItem_RELIC_TECH                 TradeItem = 69
	TradeItem_NOVEL_LIFEFORMS            TradeItem = 70
	TradeItem_BOTANICAL_SPECIMENS        TradeItem = 71
	TradeItem_CULTURAL_ARTIFACTS         TradeItem = 72
	TradeItem_FRAME_PROBE                TradeItem = 73
	TradeItem_FRAME_DRONE                TradeItem = 74
	TradeItem_FRAME_INTERCEPTOR          TradeItem = 75
	TradeItem_FRAME_RACER                TradeItem = 76
	TradeItem_FRAME_FIGHTER              TradeItem = 77
	TradeItem_FRAME_FRIGATE              TradeItem = 78
	TradeItem_FRAME_SHUTTLE              TradeItem = 79
	TradeItem_FRAME_EXPLORER             TradeItem = 80
	TradeItem_FRAME_MINER                TradeItem = 81
	TradeItem_FRAME_LIGHT_FREIGHTER      TradeItem = 82
	TradeItem_FRAME_HEAVY_FREIGHTER      TradeItem = 83
	TradeItem_FRAME_TRANSPORT            TradeItem = 84
	TradeItem_FRAME_DESTROYER            TradeItem = 85
	TradeItem_FRAME_CRUISER              TradeItem = 86
	TradeItem_FRAME_CARRIER              TradeItem = 87
	TradeItem_REACTOR_SOLAR_I            TradeItem = 88
	TradeItem_REACTOR_FUSION_I           TradeItem = 89
	TradeItem_REACTOR_FISSION_I          TradeItem = 90
	TradeItem_REACTOR_CHEMICAL_I         TradeItem = 91
	TradeItem_REACTOR_ANTIMATTER_I       TradeItem = 92
	TradeItem_ENGINE_IMPULSE_DRIVE_I     TradeItem = 93
	TradeItem_ENGINE_ION_DRIVE_I         TradeItem = 94
	TradeItem_ENGINE_ION_DRIVE_II        TradeItem = 95
	TradeItem_ENGINE_HYPER_DRIVE_I       TradeItem = 96
	TradeItem_MODULE_MINERAL_PROCESSOR_I TradeItem = 97
	TradeItem_MODULE_GAS_PROCESSOR_I     TradeItem = 98
	TradeItem_MODULE_CARGO_HOLD_I        TradeItem = 99
	TradeItem_MODULE_CARGO_HOLD_II       TradeItem = 100
	TradeItem_MODULE_CARGO_HOLD_III      TradeItem = 101
	TradeItem_MODULE_CREW_QUARTERS_I     TradeItem = 102
	TradeItem_MODULE_ENVOY_QUARTERS_I    TradeItem = 103
	TradeItem_MODULE_PASSENGER_CABIN_I   TradeItem = 104
	TradeItem_MODULE_MICRO_REFINERY_I    TradeItem = 105
	TradeItem_MODULE_SCIENCE_LAB_I       TradeItem = 106
	TradeItem_MODULE_JUMP_DRIVE_I        TradeItem = 107
	TradeItem_MODULE_JUMP_DRIVE_II       TradeItem = 108
	TradeItem_MODULE_JUMP_DRIVE_III      TradeItem = 109
	TradeItem_MODULE_WARP_DRIVE_I        TradeItem = 110
	TradeItem_MODULE_WARP_DRIVE_II       TradeItem = 111
	TradeItem_MODULE_WARP_DRIVE_III      TradeItem = 112
	TradeItem_MODULE_SHIELD_GENERATOR_I  TradeItem = 113
	TradeItem_MODULE_SHIELD_GENERATOR_II TradeItem = 114
	TradeItem_MODULE_ORE_REFINERY_I      TradeItem = 115
	TradeItem_MODULE_FUEL_REFINERY_I     TradeItem = 116
	TradeItem_MOUNT_GAS_SIPHON_I         TradeItem = 117
	TradeItem_MOUNT_GAS_SIPHON_II        TradeItem = 118
	TradeItem_MOUNT_GAS_SIPHON_III       TradeItem = 119
	TradeItem_MOUNT_SURVEYOR_I           TradeItem = 120
	TradeItem_MOUNT_SURVEYOR_II          TradeItem = 121
	TradeItem_MOUNT_SURVEYOR_III         TradeItem = 122
	TradeItem_MOUNT_SENSOR_ARRAY_I       TradeItem = 123
	TradeItem_MOUNT_SENSOR_ARRAY_II      TradeItem = 124
	TradeItem_MOUNT_SENSOR_ARRAY_III     TradeItem = 125
	TradeItem_MOUNT_MINING_LASER_I       TradeItem = 126
	TradeItem_MOUNT_MINING_LASER_II      TradeItem = 127
	TradeItem_MOUNT_MINING_LASER_III     TradeItem = 128
	TradeItem_MOUNT_LASER_CANNON_I       TradeItem = 129
	TradeItem_MOUNT_MISSILE_LAUNCHER_I   TradeItem = 130
	TradeItem_MOUNT_TURRET_I             TradeItem = 131
	TradeItem_SHIP_PROBE                 TradeItem = 132
	TradeItem_SHIP_MINING_DRONE          TradeItem = 133
	TradeItem_SHIP_SIPHON_DRONE          TradeItem = 134
	TradeItem_SHIP_INTERCEPTOR           TradeItem = 135
	TradeItem_SHIP_LIGHT_HAULER          TradeItem = 136
	TradeItem_SHIP_COMMAND_FRIGATE       TradeItem = 137
	TradeItem_SHIP_EXPLORER              TradeItem = 138
	TradeItem_SHIP_HEAVY_FREIGHTER       TradeItem = 139
	TradeItem_SHIP_LIGHT_SHUTTLE         TradeItem = 140
	TradeItem_SHIP_ORE_HOUND             TradeItem = 141
	TradeItem_SHIP_REFINING_FREIGHTER    TradeItem = 142
	TradeItem_SHIP_SURVEYOR              TradeItem = 143
)

// Enum value maps for TradeItem.
var (
	TradeItem_name = map[int32]string{
		0:   "UNKNOWN_TRADEITEM",
		1:   "PRECIOUS_STONES",
		2:   "QUARTZ_SAND",
		3:   "SILICON_CRYSTALS",
		4:   "AMMONIA_ICE",
		5:   "LIQUID_HYDROGEN",
		6:   "LIQUID_NITROGEN",
		7:   "ICE_WATER",
		8:   "EXOTIC_MATTER",
		9:   "ADVANCED_CIRCUITRY",
		10:  "GRAVITON_EMITTERS",
		11:  "IRON",
		12:  "IRON_ORE",
		13:  "COPPER",
		14:  "COPPER_ORE",
		15:  "ALUMINUM",
		16:  "ALUMINUM_ORE",
		17:  "SILVER",
		18:  "SILVER_ORE",
		19:  "GOLD",
		20:  "GOLD_ORE",
		21:  "PLATINUM",
		22:  "PLATINUM_ORE",
		23:  "DIAMONDS",
		24:  "URANITE",
		25:  "URANITE_ORE",
		26:  "MERITIUM",
		27:  "MERITIUM_ORE",
		28:  "HYDROCARBON",
		29:  "ANTIMATTER",
		30:  "FAB_MATS",
		31:  "FERTILIZERS",
		32:  "FABRICS",
		33:  "FOOD",
		34:  "JEWELRY",
		35:  "MACHINERY",
		36:  "FIREARMS",
		37:  "ASSAULT_RIFLES",
		38:  "MILITARY_EQUIPMENT",
		39:  "EXPLOSIVES",
		40:  "LAB_INSTRUMENTS",
		41:  "AMMUNITION",
		42:  "ELECTRONICS",
		43:  "SHIP_PLATING",
		44:  "SHIP_PARTS",
		45:  "EQUIPMENT",
		46:  "FUEL",
		47:  "MEDICINE",
		48:  "DRUGS",
		49:  "CLOTHING",
		50:  "MICROPROCESSORS",
		51:  "PLASTICS",
		52:  "POLYNUCLEOTIDES",
		53:  "BIOCOMPOSITES",
		54:  "QUANTUM_STABILIZERS",
		55:  "NANOBOTS",
		56:  "AI_MAINFRAMES",
		57:  "QUANTUM_DRIVES",
		58:  "ROBOTIC_DRONES",
		59:  "CYBER_IMPLANTS",
		60:  "GENE_THERAPEUTICS",
		61:  "NEURAL_CHIPS",
		62:  "MOOD_REGULATORS",
		63:  "VIRAL_AGENTS",
		64:  "MICRO_FUSION_GENERATORS",
		65:  "SUPERGRAINS",
		66:  "LASER_RIFLES",
		67:  "HOLOGRAPHICS",
		68:  "SHIP_SALVAGE",
		69:  "RELIC_TECH",
		70:  "NOVEL_LIFEFORMS",
		71:  "BOTANICAL_SPECIMENS",
		72:  "CULTURAL_ARTIFACTS",
		73:  "FRAME_PROBE",
		74:  "FRAME_DRONE",
		75:  "FRAME_INTERCEPTOR",
		76:  "FRAME_RACER",
		77:  "FRAME_FIGHTER",
		78:  "FRAME_FRIGATE",
		79:  "FRAME_SHUTTLE",
		80:  "FRAME_EXPLORER",
		81:  "FRAME_MINER",
		82:  "FRAME_LIGHT_FREIGHTER",
		83:  "FRAME_HEAVY_FREIGHTER",
		84:  "FRAME_TRANSPORT",
		85:  "FRAME_DESTROYER",
		86:  "FRAME_CRUISER",
		87:  "FRAME_CARRIER",
		88:  "REACTOR_SOLAR_I",
		89:  "REACTOR_FUSION_I",
		90:  "REACTOR_FISSION_I",
		91:  "REACTOR_CHEMICAL_I",
		92:  "REACTOR_ANTIMATTER_I",
		93:  "ENGINE_IMPULSE_DRIVE_I",
		94:  "ENGINE_ION_DRIVE_I",
		95:  "ENGINE_ION_DRIVE_II",
		96:  "ENGINE_HYPER_DRIVE_I",
		97:  "MODULE_MINERAL_PROCESSOR_I",
		98:  "MODULE_GAS_PROCESSOR_I",
		99:  "MODULE_CARGO_HOLD_I",
		100: "MODULE_CARGO_HOLD_II",
		101: "MODULE_CARGO_HOLD_III",
		102: "MODULE_CREW_QUARTERS_I",
		103: "MODULE_ENVOY_QUARTERS_I",
		104: "MODULE_PASSENGER_CABIN_I",
		105: "MODULE_MICRO_REFINERY_I",
		106: "MODULE_SCIENCE_LAB_I",
		107: "MODULE_JUMP_DRIVE_I",
		108: "MODULE_JUMP_DRIVE_II",
		109: "MODULE_JUMP_DRIVE_III",
		110: "MODULE_WARP_DRIVE_I",
		111: "MODULE_WARP_DRIVE_II",
		112: "MODULE_WARP_DRIVE_III",
		113: "MODULE_SHIELD_GENERATOR_I",
		114: "MODULE_SHIELD_GENERATOR_II",
		115: "MODULE_ORE_REFINERY_I",
		116: "MODULE_FUEL_REFINERY_I",
		117: "MOUNT_GAS_SIPHON_I",
		118: "MOUNT_GAS_SIPHON_II",
		119: "MOUNT_GAS_SIPHON_III",
		120: "MOUNT_SURVEYOR_I",
		121: "MOUNT_SURVEYOR_II",
		122: "MOUNT_SURVEYOR_III",
		123: "MOUNT_SENSOR_ARRAY_I",
		124: "MOUNT_SENSOR_ARRAY_II",
		125: "MOUNT_SENSOR_ARRAY_III",
		126: "MOUNT_MINING_LASER_I",
		127: "MOUNT_MINING_LASER_II",
		128: "MOUNT_MINING_LASER_III",
		129: "MOUNT_LASER_CANNON_I",
		130: "MOUNT_MISSILE_LAUNCHER_I",
		131: "MOUNT_TURRET_I",
		132: "SHIP_PROBE",
		133: "SHIP_MINING_DRONE",
		134: "SHIP_SIPHON_DRONE",
		135: "SHIP_INTERCEPTOR",
		136: "SHIP_LIGHT_HAULER",
		137: "SHIP_COMMAND_FRIGATE",
		138: "SHIP_EXPLORER",
		139: "SHIP_HEAVY_FREIGHTER",
		140: "SHIP_LIGHT_SHUTTLE",
		141: "SHIP_ORE_HOUND",
		142: "SHIP_REFINING_FREIGHTER",
		143: "SHIP_SURVEYOR",
	}
	TradeItem_value = map[string]int32{
		"UNKNOWN_TRADEITEM":          0,
		"PRECIOUS_STONES":            1,
		"QUARTZ_SAND":                2,
		"SILICON_CRYSTALS":           3,
		"AMMONIA_ICE":                4,
		"LIQUID_HYDROGEN":            5,
		"LIQUID_NITROGEN":            6,
		"ICE_WATER":                  7,
		"EXOTIC_MATTER":              8,
		"ADVANCED_CIRCUITRY":         9,
		"GRAVITON_EMITTERS":          10,
		"IRON":                       11,
		"IRON_ORE":                   12,
		"COPPER":                     13,
		"COPPER_ORE":                 14,
		"ALUMINUM":                   15,
		"ALUMINUM_ORE":               16,
		"SILVER":                     17,
		"SILVER_ORE":                 18,
		"GOLD":                       19,
		"GOLD_ORE":                   20,
		"PLATINUM":                   21,
		"PLATINUM_ORE":               22,
		"DIAMONDS":                   23,
		"URANITE":                    24,
		"URANITE_ORE":                25,
		"MERITIUM":                   26,
		"MERITIUM_ORE":               27,
		"HYDROCARBON":                28,
		"ANTIMATTER":                 29,
		"FAB_MATS":                   30,
		"FERTILIZERS":                31,
		"FABRICS":                    32,
		"FOOD":                       33,
		"JEWELRY":                    34,
		"MACHINERY":                  35,
		"FIREARMS":                   36,
		"ASSAULT_RIFLES":             37,
		"MILITARY_EQUIPMENT":         38,
		"EXPLOSIVES":                 39,
		"LAB_INSTRUMENTS":            40,
		"AMMUNITION":                 41,
		"ELECTRONICS":                42,
		"SHIP_PLATING":               43,
		"SHIP_PARTS":                 44,
		"EQUIPMENT":                  45,
		"FUEL":                       46,
		"MEDICINE":                   47,
		"DRUGS":                      48,
		"CLOTHING":                   49,
		"MICROPROCESSORS":            50,
		"PLASTICS":                   51,
		"POLYNUCLEOTIDES":            52,
		"BIOCOMPOSITES":              53,
		"QUANTUM_STABILIZERS":        54,
		"NANOBOTS":                   55,
		"AI_MAINFRAMES":              56,
		"QUANTUM_DRIVES":             57,
		"ROBOTIC_DRONES":             58,
		"CYBER_IMPLANTS":             59,
		"GENE_THERAPEUTICS":          60,
		"NEURAL_CHIPS":               61,
		"MOOD_REGULATORS":            62,
		"VIRAL_AGENTS":               63,
		"MICRO_FUSION_GENERATORS":    64,
		"SUPERGRAINS":                65,
		"LASER_RIFLES":               66,
		"HOLOGRAPHICS":               67,
		"SHIP_SALVAGE":               68,
		"RELIC_TECH":                 69,
		"NOVEL_LIFEFORMS":            70,
		"BOTANICAL_SPECIMENS":        71,
		"CULTURAL_ARTIFACTS":         72,
		"FRAME_PROBE":                73,
		"FRAME_DRONE":                74,
		"FRAME_INTERCEPTOR":          75,
		"FRAME_RACER":                76,
		"FRAME_FIGHTER":              77,
		"FRAME_FRIGATE":              78,
		"FRAME_SHUTTLE":              79,
		"FRAME_EXPLORER":             80,
		"FRAME_MINER":                81,
		"FRAME_LIGHT_FREIGHTER":      82,
		"FRAME_HEAVY_FREIGHTER":      83,
		"FRAME_TRANSPORT":            84,
		"FRAME_DESTROYER":            85,
		"FRAME_CRUISER":              86,
		"FRAME_CARRIER":              87,
		"REACTOR_SOLAR_I":            88,
		"REACTOR_FUSION_I":           89,
		"REACTOR_FISSION_I":          90,
		"REACTOR_CHEMICAL_I":         91,
		"REACTOR_ANTIMATTER_I":       92,
		"ENGINE_IMPULSE_DRIVE_I":     93,
		"ENGINE_ION_DRIVE_I":         94,
		"ENGINE_ION_DRIVE_II":        95,
		"ENGINE_HYPER_DRIVE_I":       96,
		"MODULE_MINERAL_PROCESSOR_I": 97,
		"MODULE_GAS_PROCESSOR_I":     98,
		"MODULE_CARGO_HOLD_I":        99,
		"MODULE_CARGO_HOLD_II":       100,
		"MODULE_CARGO_HOLD_III":      101,
		"MODULE_CREW_QUARTERS_I":     102,
		"MODULE_ENVOY_QUARTERS_I":    103,
		"MODULE_PASSENGER_CABIN_I":   104,
		"MODULE_MICRO_REFINERY_I":    105,
		"MODULE_SCIENCE_LAB_I":       106,
		"MODULE_JUMP_DRIVE_I":        107,
		"MODULE_JUMP_DRIVE_II":       108,
		"MODULE_JUMP_DRIVE_III":      109,
		"MODULE_WARP_DRIVE_I":        110,
		"MODULE_WARP_DRIVE_II":       111,
		"MODULE_WARP_DRIVE_III":      112,
		"MODULE_SHIELD_GENERATOR_I":  113,
		"MODULE_SHIELD_GENERATOR_II": 114,
		"MODULE_ORE_REFINERY_I":      115,
		"MODULE_FUEL_REFINERY_I":     116,
		"MOUNT_GAS_SIPHON_I":         117,
		"MOUNT_GAS_SIPHON_II":        118,
		"MOUNT_GAS_SIPHON_III":       119,
		"MOUNT_SURVEYOR_I":           120,
		"MOUNT_SURVEYOR_II":          121,
		"MOUNT_SURVEYOR_III":         122,
		"MOUNT_SENSOR_ARRAY_I":       123,
		"MOUNT_SENSOR_ARRAY_II":      124,
		"MOUNT_SENSOR_ARRAY_III":     125,
		"MOUNT_MINING_LASER_I":       126,
		"MOUNT_MINING_LASER_II":      127,
		"MOUNT_MINING_LASER_III":     128,
		"MOUNT_LASER_CANNON_I":       129,
		"MOUNT_MISSILE_LAUNCHER_I":   130,
		"MOUNT_TURRET_I":             131,
		"SHIP_PROBE":                 132,
		"SHIP_MINING_DRONE":          133,
		"SHIP_SIPHON_DRONE":          134,
		"SHIP_INTERCEPTOR":           135,
		"SHIP_LIGHT_HAULER":          136,
		"SHIP_COMMAND_FRIGATE":       137,
		"SHIP_EXPLORER":              138,
		"SHIP_HEAVY_FREIGHTER":       139,
		"SHIP_LIGHT_SHUTTLE":         140,
		"SHIP_ORE_HOUND":             141,
		"SHIP_REFINING_FREIGHTER":    142,
		"SHIP_SURVEYOR":              143,
	}
)

func (x TradeItem) Enum() *TradeItem {
	p := new(TradeItem)
	*p = x
	return p
}

func (x TradeItem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeItem) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[1].Descriptor()
}

func (TradeItem) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[1]
}

func (x TradeItem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeItem.Descriptor instead.
func (TradeItem) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

type Ship_Role int32

const (
	Ship_UNKNOWN_SHIPROLE Ship_Role = 0
	Ship_FABRICATOR       Ship_Role = 1
	Ship_HARVESTER        Ship_Role = 2
	Ship_HAULER           Ship_Role = 3
	Ship_INTERCEPTOR      Ship_Role = 4
	Ship_EXCAVATOR        Ship_Role = 5
	Ship_TRANSPORT        Ship_Role = 6
	Ship_REPAIR           Ship_Role = 7
	Ship_SURVEYOR         Ship_Role = 8
	Ship_COMMAND          Ship_Role = 9
	Ship_CARRIER          Ship_Role = 10
	Ship_PATROL           Ship_Role = 11
	Ship_SATELLITE        Ship_Role = 12
	Ship_EXPLORER         Ship_Role = 13
	Ship_REFINERY         Ship_Role = 14
)

// Enum value maps for Ship_Role.
var (
	Ship_Role_name = map[int32]string{
		0:  "UNKNOWN_SHIPROLE",
		1:  "FABRICATOR",
		2:  "HARVESTER",
		3:  "HAULER",
		4:  "INTERCEPTOR",
		5:  "EXCAVATOR",
		6:  "TRANSPORT",
		7:  "REPAIR",
		8:  "SURVEYOR",
		9:  "COMMAND",
		10: "CARRIER",
		11: "PATROL",
		12: "SATELLITE",
		13: "EXPLORER",
		14: "REFINERY",
	}
	Ship_Role_value = map[string]int32{
		"UNKNOWN_SHIPROLE": 0,
		"FABRICATOR":       1,
		"HARVESTER":        2,
		"HAULER":           3,
		"INTERCEPTOR":      4,
		"EXCAVATOR":        5,
		"TRANSPORT":        6,
		"REPAIR":           7,
		"SURVEYOR":         8,
		"COMMAND":          9,
		"CARRIER":          10,
		"PATROL":           11,
		"SATELLITE":        12,
		"EXPLORER":         13,
		"REFINERY":         14,
	}
)

func (x Ship_Role) Enum() *Ship_Role {
	p := new(Ship_Role)
	*p = x
	return p
}

func (x Ship_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ship_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[2].Descriptor()
}

func (Ship_Role) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[2]
}

func (x Ship_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ship_Role.Descriptor instead.
func (Ship_Role) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 0}
}

type Ship_FlightStatus int32

const (
	Ship_UNKNOWN_FLIGHTSTATUS Ship_FlightStatus = 0
	Ship_DOCKED               Ship_FlightStatus = 1
	Ship_IN_ORBIT             Ship_FlightStatus = 2
	Ship_IN_TRANSIT           Ship_FlightStatus = 3
)

// Enum value maps for Ship_FlightStatus.
var (
	Ship_FlightStatus_name = map[int32]string{
		0: "UNKNOWN_FLIGHTSTATUS",
		1: "DOCKED",
		2: "IN_ORBIT",
		3: "IN_TRANSIT",
	}
	Ship_FlightStatus_value = map[string]int32{
		"UNKNOWN_FLIGHTSTATUS": 0,
		"DOCKED":               1,
		"IN_ORBIT":             2,
		"IN_TRANSIT":           3,
	}
)

func (x Ship_FlightStatus) Enum() *Ship_FlightStatus {
	p := new(Ship_FlightStatus)
	*p = x
	return p
}

func (x Ship_FlightStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ship_FlightStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[3].Descriptor()
}

func (Ship_FlightStatus) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[3]
}

func (x Ship_FlightStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ship_FlightStatus.Descriptor instead.
func (Ship_FlightStatus) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 1}
}

type Ship_FlightMode int32

const (
	Ship_UNKNOWN_FLIGHTMODE Ship_FlightMode = 0
	Ship_CRUISE             Ship_FlightMode = 1
	Ship_DRIFT              Ship_FlightMode = 2
	Ship_STEALTH            Ship_FlightMode = 3
	Ship_BURN               Ship_FlightMode = 4
)

// Enum value maps for Ship_FlightMode.
var (
	Ship_FlightMode_name = map[int32]string{
		0: "UNKNOWN_FLIGHTMODE",
		1: "CRUISE",
		2: "DRIFT",
		3: "STEALTH",
		4: "BURN",
	}
	Ship_FlightMode_value = map[string]int32{
		"UNKNOWN_FLIGHTMODE": 0,
		"CRUISE":             1,
		"DRIFT":              2,
		"STEALTH":            3,
		"BURN":               4,
	}
)

func (x Ship_FlightMode) Enum() *Ship_FlightMode {
	p := new(Ship_FlightMode)
	*p = x
	return p
}

func (x Ship_FlightMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ship_FlightMode) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[4].Descriptor()
}

func (Ship_FlightMode) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[4]
}

func (x Ship_FlightMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ship_FlightMode.Descriptor instead.
func (Ship_FlightMode) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 2}
}

type Ship_Crew_Rotation int32

const (
	// Improves the ship's performance.
	Ship_Crew_STRICT Ship_Crew_Rotation = 0
	// Improves the crew's morale.
	Ship_Crew_RELAXED Ship_Crew_Rotation = 1
)

// Enum value maps for Ship_Crew_Rotation.
var (
	Ship_Crew_Rotation_name = map[int32]string{
		0: "STRICT",
		1: "RELAXED",
	}
	Ship_Crew_Rotation_value = map[string]int32{
		"STRICT":  0,
		"RELAXED": 1,
	}
)

func (x Ship_Crew_Rotation) Enum() *Ship_Crew_Rotation {
	p := new(Ship_Crew_Rotation)
	*p = x
	return p
}

func (x Ship_Crew_Rotation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ship_Crew_Rotation) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[5].Descriptor()
}

func (Ship_Crew_Rotation) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[5]
}

func (x Ship_Crew_Rotation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ship_Crew_Rotation.Descriptor instead.
func (Ship_Crew_Rotation) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 2, 0}
}

type FrameComponent_Type int32

const (
	FrameComponent_FRAME_UNKNOWN         FrameComponent_Type = 0
	FrameComponent_FRAME_PROBE           FrameComponent_Type = 1
	FrameComponent_FRAME_DRONE           FrameComponent_Type = 2
	FrameComponent_FRAME_INTERCEPTOR     FrameComponent_Type = 3
	FrameComponent_FRAME_RACER           FrameComponent_Type = 4
	FrameComponent_FRAME_FIGHTER         FrameComponent_Type = 5
	FrameComponent_FRAME_FRIGATE         FrameComponent_Type = 6
	FrameComponent_FRAME_SHUTTLE         FrameComponent_Type = 7
	FrameComponent_FRAME_EXPLORER        FrameComponent_Type = 8
	FrameComponent_FRAME_MINER           FrameComponent_Type = 9
	FrameComponent_FRAME_LIGHT_FREIGHTER FrameComponent_Type = 10
	FrameComponent_FRAME_HEAVY_FREIGHTER FrameComponent_Type = 11
	FrameComponent_FRAME_TRANSPORT       FrameComponent_Type = 12
	FrameComponent_FRAME_DESTROYER       FrameComponent_Type = 13
	FrameComponent_FRAME_CRUISER         FrameComponent_Type = 14
	FrameComponent_FRAME_CARRIER         FrameComponent_Type = 15
)

// Enum value maps for FrameComponent_Type.
var (
	FrameComponent_Type_name = map[int32]string{
		0:  "FRAME_UNKNOWN",
		1:  "FRAME_PROBE",
		2:  "FRAME_DRONE",
		3:  "FRAME_INTERCEPTOR",
		4:  "FRAME_RACER",
		5:  "FRAME_FIGHTER",
		6:  "FRAME_FRIGATE",
		7:  "FRAME_SHUTTLE",
		8:  "FRAME_EXPLORER",
		9:  "FRAME_MINER",
		10: "FRAME_LIGHT_FREIGHTER",
		11: "FRAME_HEAVY_FREIGHTER",
		12: "FRAME_TRANSPORT",
		13: "FRAME_DESTROYER",
		14: "FRAME_CRUISER",
		15: "FRAME_CARRIER",
	}
	FrameComponent_Type_value = map[string]int32{
		"FRAME_UNKNOWN":         0,
		"FRAME_PROBE":           1,
		"FRAME_DRONE":           2,
		"FRAME_INTERCEPTOR":     3,
		"FRAME_RACER":           4,
		"FRAME_FIGHTER":         5,
		"FRAME_FRIGATE":         6,
		"FRAME_SHUTTLE":         7,
		"FRAME_EXPLORER":        8,
		"FRAME_MINER":           9,
		"FRAME_LIGHT_FREIGHTER": 10,
		"FRAME_HEAVY_FREIGHTER": 11,
		"FRAME_TRANSPORT":       12,
		"FRAME_DESTROYER":       13,
		"FRAME_CRUISER":         14,
		"FRAME_CARRIER":         15,
	}
)

func (x FrameComponent_Type) Enum() *FrameComponent_Type {
	p := new(FrameComponent_Type)
	*p = x
	return p
}

func (x FrameComponent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FrameComponent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[6].Descriptor()
}

func (FrameComponent_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[6]
}

func (x FrameComponent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FrameComponent_Type.Descriptor instead.
func (FrameComponent_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6, 0}
}

type ReactorComponent_Type int32

const (
	ReactorComponent_REACTOR_UNKNOWN      ReactorComponent_Type = 0
	ReactorComponent_REACTOR_SOLAR_I      ReactorComponent_Type = 1
	ReactorComponent_REACTOR_FUSION_I     ReactorComponent_Type = 2
	ReactorComponent_REACTOR_FISSION_I    ReactorComponent_Type = 3
	ReactorComponent_REACTOR_CHEMICAL_I   ReactorComponent_Type = 4
	ReactorComponent_REACTOR_ANTIMATTER_I ReactorComponent_Type = 5
)

// Enum value maps for ReactorComponent_Type.
var (
	ReactorComponent_Type_name = map[int32]string{
		0: "REACTOR_UNKNOWN",
		1: "REACTOR_SOLAR_I",
		2: "REACTOR_FUSION_I",
		3: "REACTOR_FISSION_I",
		4: "REACTOR_CHEMICAL_I",
		5: "REACTOR_ANTIMATTER_I",
	}
	ReactorComponent_Type_value = map[string]int32{
		"REACTOR_UNKNOWN":      0,
		"REACTOR_SOLAR_I":      1,
		"REACTOR_FUSION_I":     2,
		"REACTOR_FISSION_I":    3,
		"REACTOR_CHEMICAL_I":   4,
		"REACTOR_ANTIMATTER_I": 5,
	}
)

func (x ReactorComponent_Type) Enum() *ReactorComponent_Type {
	p := new(ReactorComponent_Type)
	*p = x
	return p
}

func (x ReactorComponent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReactorComponent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[7].Descriptor()
}

func (ReactorComponent_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[7]
}

func (x ReactorComponent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReactorComponent_Type.Descriptor instead.
func (ReactorComponent_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7, 0}
}

type EngineComponent_Type int32

const (
	EngineComponent_ENGINE_UNKNOWN         EngineComponent_Type = 0
	EngineComponent_ENGINE_IMPULSE_DRIVE_I EngineComponent_Type = 1
	EngineComponent_ENGINE_ION_DRIVE_I     EngineComponent_Type = 2
	EngineComponent_ENGINE_ION_DRIVE_II    EngineComponent_Type = 3
	EngineComponent_ENGINE_HYPER_DRIVE_I   EngineComponent_Type = 4
)

// Enum value maps for EngineComponent_Type.
var (
	EngineComponent_Type_name = map[int32]string{
		0: "ENGINE_UNKNOWN",
		1: "ENGINE_IMPULSE_DRIVE_I",
		2: "ENGINE_ION_DRIVE_I",
		3: "ENGINE_ION_DRIVE_II",
		4: "ENGINE_HYPER_DRIVE_I",
	}
	EngineComponent_Type_value = map[string]int32{
		"ENGINE_UNKNOWN":         0,
		"ENGINE_IMPULSE_DRIVE_I": 1,
		"ENGINE_ION_DRIVE_I":     2,
		"ENGINE_ION_DRIVE_II":    3,
		"ENGINE_HYPER_DRIVE_I":   4,
	}
)

func (x EngineComponent_Type) Enum() *EngineComponent_Type {
	p := new(EngineComponent_Type)
	*p = x
	return p
}

func (x EngineComponent_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EngineComponent_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[8].Descriptor()
}

func (EngineComponent_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[8]
}

func (x EngineComponent_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EngineComponent_Type.Descriptor instead.
func (EngineComponent_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8, 0}
}

type Module_Type int32

const (
	Module_MODULE_UNKNOWN             Module_Type = 0
	Module_MODULE_MINERAL_PROCESSOR_I Module_Type = 1
	Module_MODULE_GAS_PROCESSOR_I     Module_Type = 2
	Module_MODULE_CARGO_HOLD_I        Module_Type = 3
	Module_MODULE_CARGO_HOLD_II       Module_Type = 4
	Module_MODULE_CARGO_HOLD_III      Module_Type = 5
	Module_MODULE_CREW_QUARTERS_I     Module_Type = 6
	Module_MODULE_ENVOY_QUARTERS_I    Module_Type = 7
	Module_MODULE_PASSENGER_CABIN_I   Module_Type = 8
	Module_MODULE_MICRO_REFINERY_I    Module_Type = 9
	Module_MODULE_ORE_REFINERY_I      Module_Type = 10
	Module_MODULE_FUEL_REFINERY_I     Module_Type = 11
	Module_MODULE_SCIENCE_LAB_I       Module_Type = 12
	Module_MODULE_JUMP_DRIVE_I        Module_Type = 13
	Module_MODULE_JUMP_DRIVE_II       Module_Type = 14
	Module_MODULE_JUMP_DRIVE_III      Module_Type = 15
	Module_MODULE_WARP_DRIVE_I        Module_Type = 16
	Module_MODULE_WARP_DRIVE_II       Module_Type = 17
	Module_MODULE_WARP_DRIVE_III      Module_Type = 18
	Module_MODULE_SHIELD_GENERATOR_I  Module_Type = 19
	Module_MODULE_SHIELD_GENERATOR_II Module_Type = 20
)

// Enum value maps for Module_Type.
var (
	Module_Type_name = map[int32]string{
		0:  "MODULE_UNKNOWN",
		1:  "MODULE_MINERAL_PROCESSOR_I",
		2:  "MODULE_GAS_PROCESSOR_I",
		3:  "MODULE_CARGO_HOLD_I",
		4:  "MODULE_CARGO_HOLD_II",
		5:  "MODULE_CARGO_HOLD_III",
		6:  "MODULE_CREW_QUARTERS_I",
		7:  "MODULE_ENVOY_QUARTERS_I",
		8:  "MODULE_PASSENGER_CABIN_I",
		9:  "MODULE_MICRO_REFINERY_I",
		10: "MODULE_ORE_REFINERY_I",
		11: "MODULE_FUEL_REFINERY_I",
		12: "MODULE_SCIENCE_LAB_I",
		13: "MODULE_JUMP_DRIVE_I",
		14: "MODULE_JUMP_DRIVE_II",
		15: "MODULE_JUMP_DRIVE_III",
		16: "MODULE_WARP_DRIVE_I",
		17: "MODULE_WARP_DRIVE_II",
		18: "MODULE_WARP_DRIVE_III",
		19: "MODULE_SHIELD_GENERATOR_I",
		20: "MODULE_SHIELD_GENERATOR_II",
	}
	Module_Type_value = map[string]int32{
		"MODULE_UNKNOWN":             0,
		"MODULE_MINERAL_PROCESSOR_I": 1,
		"MODULE_GAS_PROCESSOR_I":     2,
		"MODULE_CARGO_HOLD_I":        3,
		"MODULE_CARGO_HOLD_II":       4,
		"MODULE_CARGO_HOLD_III":      5,
		"MODULE_CREW_QUARTERS_I":     6,
		"MODULE_ENVOY_QUARTERS_I":    7,
		"MODULE_PASSENGER_CABIN_I":   8,
		"MODULE_MICRO_REFINERY_I":    9,
		"MODULE_ORE_REFINERY_I":      10,
		"MODULE_FUEL_REFINERY_I":     11,
		"MODULE_SCIENCE_LAB_I":       12,
		"MODULE_JUMP_DRIVE_I":        13,
		"MODULE_JUMP_DRIVE_II":       14,
		"MODULE_JUMP_DRIVE_III":      15,
		"MODULE_WARP_DRIVE_I":        16,
		"MODULE_WARP_DRIVE_II":       17,
		"MODULE_WARP_DRIVE_III":      18,
		"MODULE_SHIELD_GENERATOR_I":  19,
		"MODULE_SHIELD_GENERATOR_II": 20,
	}
)

func (x Module_Type) Enum() *Module_Type {
	p := new(Module_Type)
	*p = x
	return p
}

func (x Module_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Module_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[9].Descriptor()
}

func (Module_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[9]
}

func (x Module_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Module_Type.Descriptor instead.
func (Module_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9, 0}
}

type Mount_Type int32

const (
	Mount_MOUNT_UNKNOWN            Mount_Type = 0
	Mount_MOUNT_GAS_SIPHON_I       Mount_Type = 1
	Mount_MOUNT_GAS_SIPHON_II      Mount_Type = 2
	Mount_MOUNT_GAS_SIPHON_III     Mount_Type = 3
	Mount_MOUNT_SURVEYOR_I         Mount_Type = 4
	Mount_MOUNT_SURVEYOR_II        Mount_Type = 5
	Mount_MOUNT_SURVEYOR_III       Mount_Type = 6
	Mount_MOUNT_SENSOR_ARRAY_I     Mount_Type = 7
	Mount_MOUNT_SENSOR_ARRAY_II    Mount_Type = 8
	Mount_MOUNT_SENSOR_ARRAY_III   Mount_Type = 9
	Mount_MOUNT_MINING_LASER_I     Mount_Type = 10
	Mount_MOUNT_MINING_LASER_II    Mount_Type = 11
	Mount_MOUNT_MINING_LASER_III   Mount_Type = 12
	Mount_MOUNT_LASER_CANNON_I     Mount_Type = 13
	Mount_MOUNT_MISSILE_LAUNCHER_I Mount_Type = 14
	Mount_MOUNT_TURRET_I           Mount_Type = 15
)

// Enum value maps for Mount_Type.
var (
	Mount_Type_name = map[int32]string{
		0:  "MOUNT_UNKNOWN",
		1:  "MOUNT_GAS_SIPHON_I",
		2:  "MOUNT_GAS_SIPHON_II",
		3:  "MOUNT_GAS_SIPHON_III",
		4:  "MOUNT_SURVEYOR_I",
		5:  "MOUNT_SURVEYOR_II",
		6:  "MOUNT_SURVEYOR_III",
		7:  "MOUNT_SENSOR_ARRAY_I",
		8:  "MOUNT_SENSOR_ARRAY_II",
		9:  "MOUNT_SENSOR_ARRAY_III",
		10: "MOUNT_MINING_LASER_I",
		11: "MOUNT_MINING_LASER_II",
		12: "MOUNT_MINING_LASER_III",
		13: "MOUNT_LASER_CANNON_I",
		14: "MOUNT_MISSILE_LAUNCHER_I",
		15: "MOUNT_TURRET_I",
	}
	Mount_Type_value = map[string]int32{
		"MOUNT_UNKNOWN":            0,
		"MOUNT_GAS_SIPHON_I":       1,
		"MOUNT_GAS_SIPHON_II":      2,
		"MOUNT_GAS_SIPHON_III":     3,
		"MOUNT_SURVEYOR_I":         4,
		"MOUNT_SURVEYOR_II":        5,
		"MOUNT_SURVEYOR_III":       6,
		"MOUNT_SENSOR_ARRAY_I":     7,
		"MOUNT_SENSOR_ARRAY_II":    8,
		"MOUNT_SENSOR_ARRAY_III":   9,
		"MOUNT_MINING_LASER_I":     10,
		"MOUNT_MINING_LASER_II":    11,
		"MOUNT_MINING_LASER_III":   12,
		"MOUNT_LASER_CANNON_I":     13,
		"MOUNT_MISSILE_LAUNCHER_I": 14,
		"MOUNT_TURRET_I":           15,
	}
)

func (x Mount_Type) Enum() *Mount_Type {
	p := new(Mount_Type)
	*p = x
	return p
}

func (x Mount_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mount_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[10].Descriptor()
}

func (Mount_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[10]
}

func (x Mount_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mount_Type.Descriptor instead.
func (Mount_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10, 0}
}

type System_Type int32

const (
	System_UNKNOWN_SYSTEMTYPE System_Type = 0
	System_NEUTRON_STAR       System_Type = 1
	System_RED_STAR           System_Type = 2
	System_ORANGE_STAR        System_Type = 3
	System_BLUE_STAR          System_Type = 4
	System_YOUNG_STAR         System_Type = 5
	System_WHITE_DWARF        System_Type = 6
	System_BLACK_HOLE         System_Type = 7
	System_HYPERGIANT         System_Type = 8
	System_NEBULA             System_Type = 9
	System_UNSTABLE           System_Type = 10
)

// Enum value maps for System_Type.
var (
	System_Type_name = map[int32]string{
		0:  "UNKNOWN_SYSTEMTYPE",
		1:  "NEUTRON_STAR",
		2:  "RED_STAR",
		3:  "ORANGE_STAR",
		4:  "BLUE_STAR",
		5:  "YOUNG_STAR",
		6:  "WHITE_DWARF",
		7:  "BLACK_HOLE",
		8:  "HYPERGIANT",
		9:  "NEBULA",
		10: "UNSTABLE",
	}
	System_Type_value = map[string]int32{
		"UNKNOWN_SYSTEMTYPE": 0,
		"NEUTRON_STAR":       1,
		"RED_STAR":           2,
		"ORANGE_STAR":        3,
		"BLUE_STAR":          4,
		"YOUNG_STAR":         5,
		"WHITE_DWARF":        6,
		"BLACK_HOLE":         7,
		"HYPERGIANT":         8,
		"NEBULA":             9,
		"UNSTABLE":           10,
	}
)

func (x System_Type) Enum() *System_Type {
	p := new(System_Type)
	*p = x
	return p
}

func (x System_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (System_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[11].Descriptor()
}

func (System_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[11]
}

func (x System_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use System_Type.Descriptor instead.
func (System_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11, 0}
}

type WaypointBase_Type int32

const (
	WaypointBase_UNKNOWN_WAYPOINTTYPE    WaypointBase_Type = 0
	WaypointBase_PLANET                  WaypointBase_Type = 1
	WaypointBase_GAS_GIANT               WaypointBase_Type = 2
	WaypointBase_MOON                    WaypointBase_Type = 3
	WaypointBase_ORBITAL_STATION         WaypointBase_Type = 4
	WaypointBase_JUMP_GATE               WaypointBase_Type = 5
	WaypointBase_ASTEROID_FIELD          WaypointBase_Type = 6
	WaypointBase_ASTEROID                WaypointBase_Type = 7
	WaypointBase_ENGINEERED_ASTEROID     WaypointBase_Type = 8
	WaypointBase_ASTEROID_BASE           WaypointBase_Type = 9
	WaypointBase_NEBULA                  WaypointBase_Type = 10
	WaypointBase_DEBRIS_FIELD            WaypointBase_Type = 11
	WaypointBase_GRAVITY_WELL            WaypointBase_Type = 12
	WaypointBase_ARTIFICIAL_GRAVITY_WELL WaypointBase_Type = 13
	WaypointBase_FUEL_STATION            WaypointBase_Type = 14
)

// Enum value maps for WaypointBase_Type.
var (
	WaypointBase_Type_name = map[int32]string{
		0:  "UNKNOWN_WAYPOINTTYPE",
		1:  "PLANET",
		2:  "GAS_GIANT",
		3:  "MOON",
		4:  "ORBITAL_STATION",
		5:  "JUMP_GATE",
		6:  "ASTEROID_FIELD",
		7:  "ASTEROID",
		8:  "ENGINEERED_ASTEROID",
		9:  "ASTEROID_BASE",
		10: "NEBULA",
		11: "DEBRIS_FIELD",
		12: "GRAVITY_WELL",
		13: "ARTIFICIAL_GRAVITY_WELL",
		14: "FUEL_STATION",
	}
	WaypointBase_Type_value = map[string]int32{
		"UNKNOWN_WAYPOINTTYPE":    0,
		"PLANET":                  1,
		"GAS_GIANT":               2,
		"MOON":                    3,
		"ORBITAL_STATION":         4,
		"JUMP_GATE":               5,
		"ASTEROID_FIELD":          6,
		"ASTEROID":                7,
		"ENGINEERED_ASTEROID":     8,
		"ASTEROID_BASE":           9,
		"NEBULA":                  10,
		"DEBRIS_FIELD":            11,
		"GRAVITY_WELL":            12,
		"ARTIFICIAL_GRAVITY_WELL": 13,
		"FUEL_STATION":            14,
	}
)

func (x WaypointBase_Type) Enum() *WaypointBase_Type {
	p := new(WaypointBase_Type)
	*p = x
	return p
}

func (x WaypointBase_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WaypointBase_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_server_proto_enumTypes[12].Descriptor()
}

func (WaypointBase_Type) Type() protoreflect.EnumType {
	return &file_server_proto_enumTypes[12]
}

func (x WaypointBase_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WaypointBase_Type.Descriptor instead.
func (WaypointBase_Type) EnumDescriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12, 0}
}

type ServerStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version       string                       `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	LastReset     *timestamppb.Timestamp       `protobuf:"bytes,2,opt,name=last_reset,json=lastReset,proto3" json:"last_reset,omitempty"`
	NextReset     *timestamppb.Timestamp       `protobuf:"bytes,3,opt,name=next_reset,json=nextReset,proto3" json:"next_reset,omitempty"`
	GlobalStats   *ServerStatus_GlobalStats    `protobuf:"bytes,4,opt,name=global_stats,json=globalStats,proto3" json:"global_stats,omitempty"`
	Announcements []*ServerStatus_Announcement `protobuf:"bytes,5,rep,name=announcements,proto3" json:"announcements,omitempty"`
}

func (x *ServerStatus) Reset() {
	*x = ServerStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus) ProtoMessage() {}

func (x *ServerStatus) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus.ProtoReflect.Descriptor instead.
func (*ServerStatus) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0}
}

func (x *ServerStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerStatus) GetLastReset() *timestamppb.Timestamp {
	if x != nil {
		return x.LastReset
	}
	return nil
}

func (x *ServerStatus) GetNextReset() *timestamppb.Timestamp {
	if x != nil {
		return x.NextReset
	}
	return nil
}

func (x *ServerStatus) GetGlobalStats() *ServerStatus_GlobalStats {
	if x != nil {
		return x.GlobalStats
	}
	return nil
}

func (x *ServerStatus) GetAnnouncements() []*ServerStatus_Announcement {
	if x != nil {
		return x.Announcements
	}
	return nil
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Credits         int64   `protobuf:"varint,2,opt,name=credits,proto3" json:"credits,omitempty"`
	Headquarters    string  `protobuf:"bytes,3,opt,name=headquarters,proto3" json:"headquarters,omitempty"`
	ShipCount       int32   `protobuf:"varint,4,opt,name=shipCount,proto3" json:"shipCount,omitempty"`
	StartingFaction Faction `protobuf:"varint,5,opt,name=startingFaction,proto3,enum=proto.Faction" json:"startingFaction,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{1}
}

func (x *Agent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Agent) GetCredits() int64 {
	if x != nil {
		return x.Credits
	}
	return 0
}

func (x *Agent) GetHeadquarters() string {
	if x != nil {
		return x.Headquarters
	}
	return ""
}

func (x *Agent) GetShipCount() int32 {
	if x != nil {
		return x.ShipCount
	}
	return 0
}

func (x *Agent) GetStartingFaction() Faction {
	if x != nil {
		return x.StartingFaction
	}
	return Faction_UNKNOWN_FACTION
}

type Fleet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ships []*Ship `protobuf:"bytes,1,rep,name=ships,proto3" json:"ships,omitempty"`
}

func (x *Fleet) Reset() {
	*x = Fleet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fleet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fleet) ProtoMessage() {}

func (x *Fleet) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fleet.ProtoReflect.Descriptor instead.
func (*Fleet) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{2}
}

func (x *Fleet) GetShips() []*Ship {
	if x != nil {
		return x.Ships
	}
	return nil
}

type Ship struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name            string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Role            Ship_Role         `protobuf:"varint,3,opt,name=role,proto3,enum=proto.Ship_Role" json:"role,omitempty"`
	CurrentLocation *Ship_Location    `protobuf:"bytes,4,opt,name=currentLocation,proto3" json:"currentLocation,omitempty"`
	Route           *Ship_Route       `protobuf:"bytes,5,opt,name=route,proto3" json:"route,omitempty"`
	Status          Ship_FlightStatus `protobuf:"varint,6,opt,name=status,proto3,enum=proto.Ship_FlightStatus" json:"status,omitempty"`
	FlightMode      Ship_FlightMode   `protobuf:"varint,7,opt,name=flightMode,proto3,enum=proto.Ship_FlightMode" json:"flightMode,omitempty"`
	Crew            *Ship_Crew        `protobuf:"bytes,8,opt,name=crew,proto3" json:"crew,omitempty"`
	// The frame of the ship.
	// The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity.
	// As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
	Frame *FrameComponent `protobuf:"bytes,9,opt,name=frame,proto3" json:"frame,omitempty"`
	// The reactor of the ship. The reactor is responsible for powering the ship's systems and weapons.
	Reactor *ReactorComponent `protobuf:"bytes,10,opt,name=reactor,proto3" json:"reactor,omitempty"`
	// The engine determines how quickly a ship travels between waypoints.
	Engine *EngineComponent `protobuf:"bytes,11,opt,name=engine,proto3" json:"engine,omitempty"`
	// A cooldown is a period of time in which a ship cannot perform certain actions.
	Cooldown *Ship_Cooldown `protobuf:"bytes,12,opt,name=cooldown,proto3" json:"cooldown,omitempty"`
	// Modules installed in this ship.
	Modules []*Module `protobuf:"bytes,13,rep,name=modules,proto3" json:"modules,omitempty"`
	// Mounts installed in this ship.
	Mounts []*Mount    `protobuf:"bytes,14,rep,name=mounts,proto3" json:"mounts,omitempty"`
	Cargo  *Ship_Cargo `protobuf:"bytes,15,opt,name=cargo,proto3" json:"cargo,omitempty"`
	Fuel   *Ship_Fuel  `protobuf:"bytes,16,opt,name=fuel,proto3" json:"fuel,omitempty"`
}

func (x *Ship) Reset() {
	*x = Ship{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship) ProtoMessage() {}

func (x *Ship) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship.ProtoReflect.Descriptor instead.
func (*Ship) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3}
}

func (x *Ship) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Ship) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ship) GetRole() Ship_Role {
	if x != nil {
		return x.Role
	}
	return Ship_UNKNOWN_SHIPROLE
}

func (x *Ship) GetCurrentLocation() *Ship_Location {
	if x != nil {
		return x.CurrentLocation
	}
	return nil
}

func (x *Ship) GetRoute() *Ship_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *Ship) GetStatus() Ship_FlightStatus {
	if x != nil {
		return x.Status
	}
	return Ship_UNKNOWN_FLIGHTSTATUS
}

func (x *Ship) GetFlightMode() Ship_FlightMode {
	if x != nil {
		return x.FlightMode
	}
	return Ship_UNKNOWN_FLIGHTMODE
}

func (x *Ship) GetCrew() *Ship_Crew {
	if x != nil {
		return x.Crew
	}
	return nil
}

func (x *Ship) GetFrame() *FrameComponent {
	if x != nil {
		return x.Frame
	}
	return nil
}

func (x *Ship) GetReactor() *ReactorComponent {
	if x != nil {
		return x.Reactor
	}
	return nil
}

func (x *Ship) GetEngine() *EngineComponent {
	if x != nil {
		return x.Engine
	}
	return nil
}

func (x *Ship) GetCooldown() *Ship_Cooldown {
	if x != nil {
		return x.Cooldown
	}
	return nil
}

func (x *Ship) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Ship) GetMounts() []*Mount {
	if x != nil {
		return x.Mounts
	}
	return nil
}

func (x *Ship) GetCargo() *Ship_Cargo {
	if x != nil {
		return x.Cargo
	}
	return nil
}

func (x *Ship) GetFuel() *Ship_Fuel {
	if x != nil {
		return x.Fuel
	}
	return nil
}

// The requirements for installation on a ship.
type ModuleRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Power *int32 `protobuf:"varint,1,opt,name=power,proto3,oneof" json:"power,omitempty"`
	Crew  *int32 `protobuf:"varint,2,opt,name=crew,proto3,oneof" json:"crew,omitempty"`
	Slots *int32 `protobuf:"varint,3,opt,name=slots,proto3,oneof" json:"slots,omitempty"`
}

func (x *ModuleRequirements) Reset() {
	*x = ModuleRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRequirements) ProtoMessage() {}

func (x *ModuleRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRequirements.ProtoReflect.Descriptor instead.
func (*ModuleRequirements) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{4}
}

func (x *ModuleRequirements) GetPower() int32 {
	if x != nil && x.Power != nil {
		return *x.Power
	}
	return 0
}

func (x *ModuleRequirements) GetCrew() int32 {
	if x != nil && x.Crew != nil {
		return *x.Crew
	}
	return 0
}

func (x *ModuleRequirements) GetSlots() int32 {
	if x != nil && x.Slots != nil {
		return *x.Slots
	}
	return 0
}

type ModuleDegradable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repairable condition of a component (0-1).
	// A value of 0 indicates the component needs significant repairs,
	// while a value of 1 indicates the component is in near perfect condition.
	// As the condition of a component is repaired, the overall integrity of the component decreases.
	//
	// Using double (instead of float which would align with the API) to simplify conversion between API and protobuf.
	Condition float64 `protobuf:"fixed64,1,opt,name=condition,proto3" json:"condition,omitempty"`
	// The overall integrity of the component (0-1), which determines the performance of the component.
	// A value of 0 indicates that the component is almost completely degraded,
	// while a value of 1 indicates that the component is in near perfect condition.
	// The integrity of the component is non-repairable, and represents permanent wear over time.
	//
	// Using double (instead of float which would align with the API) to simplify conversion between API and protobuf.
	Integrity float64 `protobuf:"fixed64,2,opt,name=integrity,proto3" json:"integrity,omitempty"`
}

func (x *ModuleDegradable) Reset() {
	*x = ModuleDegradable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleDegradable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleDegradable) ProtoMessage() {}

func (x *ModuleDegradable) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleDegradable.ProtoReflect.Descriptor instead.
func (*ModuleDegradable) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{5}
}

func (x *ModuleDegradable) GetCondition() float64 {
	if x != nil {
		return x.Condition
	}
	return 0
}

func (x *ModuleDegradable) GetIntegrity() float64 {
	if x != nil {
		return x.Integrity
	}
	return 0
}

type FrameComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Requirements *ModuleRequirements `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Type         FrameComponent_Type `protobuf:"varint,4,opt,name=type,proto3,enum=proto.FrameComponent_Type" json:"type,omitempty"`
	Degradation  *ModuleDegradable   `protobuf:"bytes,5,opt,name=degradation,proto3" json:"degradation,omitempty"`
	// The amount of slots that can be dedicated to modules installed in the ship.
	// Each installed module take up a number of slots, and once there are no more slots, no new modules can be installed.
	ModuleSlots int32 `protobuf:"varint,6,opt,name=moduleSlots,proto3" json:"moduleSlots,omitempty"`
	// The amount of slots that can be dedicated to mounts installed in the ship.
	// Each installed mount takes up a number of points, and once there are no more points remaining,
	// no new mounts can be installed.
	MountingPoints int32 `protobuf:"varint,7,opt,name=mountingPoints,proto3" json:"mountingPoints,omitempty"`
	// The maximum amount of fuel that can be stored in this ship.
	// When refueling, the ship will be refueled to this amount.
	FuelCapacity int32 `protobuf:"varint,8,opt,name=fuelCapacity,proto3" json:"fuelCapacity,omitempty"`
}

func (x *FrameComponent) Reset() {
	*x = FrameComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameComponent) ProtoMessage() {}

func (x *FrameComponent) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameComponent.ProtoReflect.Descriptor instead.
func (*FrameComponent) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{6}
}

func (x *FrameComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FrameComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FrameComponent) GetRequirements() *ModuleRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *FrameComponent) GetType() FrameComponent_Type {
	if x != nil {
		return x.Type
	}
	return FrameComponent_FRAME_UNKNOWN
}

func (x *FrameComponent) GetDegradation() *ModuleDegradable {
	if x != nil {
		return x.Degradation
	}
	return nil
}

func (x *FrameComponent) GetModuleSlots() int32 {
	if x != nil {
		return x.ModuleSlots
	}
	return 0
}

func (x *FrameComponent) GetMountingPoints() int32 {
	if x != nil {
		return x.MountingPoints
	}
	return 0
}

func (x *FrameComponent) GetFuelCapacity() int32 {
	if x != nil {
		return x.FuelCapacity
	}
	return 0
}

type ReactorComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string                `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string                `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Requirements *ModuleRequirements   `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Type         ReactorComponent_Type `protobuf:"varint,4,opt,name=type,proto3,enum=proto.ReactorComponent_Type" json:"type,omitempty"`
	Degradation  *ModuleDegradable     `protobuf:"bytes,5,opt,name=degradation,proto3" json:"degradation,omitempty"`
	// The amount of power provided by this reactor (>=1).
	// The more power a reactor provides to the ship, the lower the cooldown it gets
	// when using a module or mount that taxes the ship's power.
	PowerOutput int32 `protobuf:"varint,6,opt,name=powerOutput,proto3" json:"powerOutput,omitempty"`
}

func (x *ReactorComponent) Reset() {
	*x = ReactorComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReactorComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReactorComponent) ProtoMessage() {}

func (x *ReactorComponent) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReactorComponent.ProtoReflect.Descriptor instead.
func (*ReactorComponent) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{7}
}

func (x *ReactorComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReactorComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ReactorComponent) GetRequirements() *ModuleRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *ReactorComponent) GetType() ReactorComponent_Type {
	if x != nil {
		return x.Type
	}
	return ReactorComponent_REACTOR_UNKNOWN
}

func (x *ReactorComponent) GetDegradation() *ModuleDegradable {
	if x != nil {
		return x.Degradation
	}
	return nil
}

func (x *ReactorComponent) GetPowerOutput() int32 {
	if x != nil {
		return x.PowerOutput
	}
	return 0
}

type EngineComponent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string               `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Requirements *ModuleRequirements  `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Type         EngineComponent_Type `protobuf:"varint,4,opt,name=type,proto3,enum=proto.EngineComponent_Type" json:"type,omitempty"`
	Degradation  *ModuleDegradable    `protobuf:"bytes,5,opt,name=degradation,proto3" json:"degradation,omitempty"`
	// The speed stat of this engine (>=1).
	// The higher the speed, the faster a ship can travel from one point to another.
	// Reduces the time of arrival when navigating the ship.
	Speed int32 `protobuf:"varint,6,opt,name=speed,proto3" json:"speed,omitempty"`
}

func (x *EngineComponent) Reset() {
	*x = EngineComponent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EngineComponent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EngineComponent) ProtoMessage() {}

func (x *EngineComponent) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EngineComponent.ProtoReflect.Descriptor instead.
func (*EngineComponent) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{8}
}

func (x *EngineComponent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EngineComponent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EngineComponent) GetRequirements() *ModuleRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *EngineComponent) GetType() EngineComponent_Type {
	if x != nil {
		return x.Type
	}
	return EngineComponent_ENGINE_UNKNOWN
}

func (x *EngineComponent) GetDegradation() *ModuleDegradable {
	if x != nil {
		return x.Degradation
	}
	return nil
}

func (x *EngineComponent) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  string              `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Requirements *ModuleRequirements `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Type         Module_Type         `protobuf:"varint,4,opt,name=type,proto3,enum=proto.Module_Type" json:"type,omitempty"`
	// Modules that provide capacity, such as cargo hold or crew quarters will
	// show this value to denote how much of a bonus the module grants.
	Capacity *int32 `protobuf:"varint,5,opt,name=capacity,proto3,oneof" json:"capacity,omitempty"`
	// Modules that have a range will such as a sensor array show this value to
	// denote how far can the module reach with its capabilities.
	Range *int32 `protobuf:"varint,6,opt,name=range,proto3,oneof" json:"range,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{9}
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Module) GetRequirements() *ModuleRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Module) GetType() Module_Type {
	if x != nil {
		return x.Type
	}
	return Module_MODULE_UNKNOWN
}

func (x *Module) GetCapacity() int32 {
	if x != nil && x.Capacity != nil {
		return *x.Capacity
	}
	return 0
}

func (x *Module) GetRange() int32 {
	if x != nil && x.Range != nil {
		return *x.Range
	}
	return 0
}

type Mount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description  *string             `protobuf:"bytes,2,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Requirements *ModuleRequirements `protobuf:"bytes,3,opt,name=requirements,proto3" json:"requirements,omitempty"`
	Type         Mount_Type          `protobuf:"varint,4,opt,name=type,proto3,enum=proto.Mount_Type" json:"type,omitempty"`
	// Mounts that have this value, such as mining lasers, denote how powerful this mount's capabilities are.
	Strength *int32 `protobuf:"varint,5,opt,name=strength,proto3,oneof" json:"strength,omitempty"`
	// Mounts that have this value denote what goods can be produced from using the mount.
	Deposits []TradeItem `protobuf:"varint,6,rep,packed,name=deposits,proto3,enum=proto.TradeItem" json:"deposits,omitempty"`
}

func (x *Mount) Reset() {
	*x = Mount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mount) ProtoMessage() {}

func (x *Mount) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mount.ProtoReflect.Descriptor instead.
func (*Mount) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{10}
}

func (x *Mount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Mount) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Mount) GetRequirements() *ModuleRequirements {
	if x != nil {
		return x.Requirements
	}
	return nil
}

func (x *Mount) GetType() Mount_Type {
	if x != nil {
		return x.Type
	}
	return Mount_MOUNT_UNKNOWN
}

func (x *Mount) GetStrength() int32 {
	if x != nil && x.Strength != nil {
		return *x.Strength
	}
	return 0
}

func (x *Mount) GetDeposits() []TradeItem {
	if x != nil {
		return x.Deposits
	}
	return nil
}

type System struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Sector    string          `protobuf:"bytes,2,opt,name=sector,proto3" json:"sector,omitempty"`
	Type      System_Type     `protobuf:"varint,3,opt,name=type,proto3,enum=proto.System_Type" json:"type,omitempty"`
	X         int64           `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y         int64           `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	Waypoints []*WaypointBase `protobuf:"bytes,6,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	// Factions that control this system.
	Factions []Faction `protobuf:"varint,7,rep,packed,name=factions,proto3,enum=proto.Faction" json:"factions,omitempty"`
}

func (x *System) Reset() {
	*x = System{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *System) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*System) ProtoMessage() {}

func (x *System) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use System.ProtoReflect.Descriptor instead.
func (*System) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{11}
}

func (x *System) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *System) GetSector() string {
	if x != nil {
		return x.Sector
	}
	return ""
}

func (x *System) GetType() System_Type {
	if x != nil {
		return x.Type
	}
	return System_UNKNOWN_SYSTEMTYPE
}

func (x *System) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *System) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *System) GetWaypoints() []*WaypointBase {
	if x != nil {
		return x.Waypoints
	}
	return nil
}

func (x *System) GetFactions() []Faction {
	if x != nil {
		return x.Factions
	}
	return nil
}

type WaypointBase struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	System string            `protobuf:"bytes,2,opt,name=system,proto3" json:"system,omitempty"`
	Type   WaypointBase_Type `protobuf:"varint,3,opt,name=type,proto3,enum=proto.WaypointBase_Type" json:"type,omitempty"`
	X      int64             `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y      int64             `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *WaypointBase) Reset() {
	*x = WaypointBase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WaypointBase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WaypointBase) ProtoMessage() {}

func (x *WaypointBase) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WaypointBase.ProtoReflect.Descriptor instead.
func (*WaypointBase) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{12}
}

func (x *WaypointBase) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WaypointBase) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *WaypointBase) GetType() WaypointBase_Type {
	if x != nil {
		return x.Type
	}
	return WaypointBase_UNKNOWN_WAYPOINTTYPE
}

func (x *WaypointBase) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *WaypointBase) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ServerStatus_GlobalStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agents    int64 `protobuf:"varint,1,opt,name=agents,proto3" json:"agents,omitempty"`
	Ships     int64 `protobuf:"varint,2,opt,name=ships,proto3" json:"ships,omitempty"`
	Waypoints int64 `protobuf:"varint,3,opt,name=waypoints,proto3" json:"waypoints,omitempty"`
	Systems   int64 `protobuf:"varint,4,opt,name=systems,proto3" json:"systems,omitempty"`
}

func (x *ServerStatus_GlobalStats) Reset() {
	*x = ServerStatus_GlobalStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus_GlobalStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus_GlobalStats) ProtoMessage() {}

func (x *ServerStatus_GlobalStats) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus_GlobalStats.ProtoReflect.Descriptor instead.
func (*ServerStatus_GlobalStats) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ServerStatus_GlobalStats) GetAgents() int64 {
	if x != nil {
		return x.Agents
	}
	return 0
}

func (x *ServerStatus_GlobalStats) GetShips() int64 {
	if x != nil {
		return x.Ships
	}
	return 0
}

func (x *ServerStatus_GlobalStats) GetWaypoints() int64 {
	if x != nil {
		return x.Waypoints
	}
	return 0
}

func (x *ServerStatus_GlobalStats) GetSystems() int64 {
	if x != nil {
		return x.Systems
	}
	return 0
}

type ServerStatus_Announcement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body  string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *ServerStatus_Announcement) Reset() {
	*x = ServerStatus_Announcement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerStatus_Announcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerStatus_Announcement) ProtoMessage() {}

func (x *ServerStatus_Announcement) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerStatus_Announcement.ProtoReflect.Descriptor instead.
func (*ServerStatus_Announcement) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{0, 1}
}

func (x *ServerStatus_Announcement) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ServerStatus_Announcement) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type Ship_Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	System   string `protobuf:"bytes,1,opt,name=system,proto3" json:"system,omitempty"`
	Waypoint string `protobuf:"bytes,2,opt,name=waypoint,proto3" json:"waypoint,omitempty"`
}

func (x *Ship_Location) Reset() {
	*x = Ship_Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Location) ProtoMessage() {}

func (x *Ship_Location) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Location.ProtoReflect.Descriptor instead.
func (*Ship_Location) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Ship_Location) GetSystem() string {
	if x != nil {
		return x.System
	}
	return ""
}

func (x *Ship_Location) GetWaypoint() string {
	if x != nil {
		return x.Waypoint
	}
	return ""
}

type Ship_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The destination or departure of a ships nav route.
	Origin *WaypointBase `protobuf:"bytes,1,opt,name=origin,proto3" json:"origin,omitempty"`
	// The destination or departure of a ships nav route.
	Destination *WaypointBase `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
	// The date time of the ship's departure.
	DepartureTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=departureTime,proto3" json:"departureTime,omitempty"`
	// The date time of the ship's arrival. If the ship is in-transit, this is the expected time of arrival.
	ArrivalTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=arrivalTime,proto3" json:"arrivalTime,omitempty"`
}

func (x *Ship_Route) Reset() {
	*x = Ship_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Route) ProtoMessage() {}

func (x *Ship_Route) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Route.ProtoReflect.Descriptor instead.
func (*Ship_Route) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Ship_Route) GetOrigin() *WaypointBase {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Ship_Route) GetDestination() *WaypointBase {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Ship_Route) GetDepartureTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DepartureTime
	}
	return nil
}

func (x *Ship_Route) GetArrivalTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ArrivalTime
	}
	return nil
}

type Ship_Crew struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimum number of crew members required to maintain the ship.
	Required int32 `protobuf:"varint,1,opt,name=required,proto3" json:"required,omitempty"`
	// The maximum number of crew members the ship can support.
	Capacity int32 `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The current number of crew members on the ship.
	Current int32 `protobuf:"varint,3,opt,name=current,proto3" json:"current,omitempty"`
	// The rotation of crew shifts.
	// A stricter shift improves the ship's performance. A more relaxed shift improves the crew's morale.
	Rotation Ship_Crew_Rotation `protobuf:"varint,4,opt,name=rotation,proto3,enum=proto.Ship_Crew_Rotation" json:"rotation,omitempty"`
	// A rough measure of the crew's morale (0-100).
	// A higher morale means the crew is happier and more productive.
	// A lower morale means the ship is more prone to accidents.
	Morale int32 `protobuf:"varint,5,opt,name=morale,proto3" json:"morale,omitempty"`
	// The amount of credits per crew member paid per hour. Wages are paid when a ship docks at a civilized waypoint.
	Wages int32 `protobuf:"varint,6,opt,name=wages,proto3" json:"wages,omitempty"`
}

func (x *Ship_Crew) Reset() {
	*x = Ship_Crew{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Crew) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Crew) ProtoMessage() {}

func (x *Ship_Crew) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Crew.ProtoReflect.Descriptor instead.
func (*Ship_Crew) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Ship_Crew) GetRequired() int32 {
	if x != nil {
		return x.Required
	}
	return 0
}

func (x *Ship_Crew) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Ship_Crew) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Ship_Crew) GetRotation() Ship_Crew_Rotation {
	if x != nil {
		return x.Rotation
	}
	return Ship_Crew_STRICT
}

func (x *Ship_Crew) GetMorale() int32 {
	if x != nil {
		return x.Morale
	}
	return 0
}

func (x *Ship_Crew) GetWages() int32 {
	if x != nil {
		return x.Wages
	}
	return 0
}

type Ship_Cooldown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total duration of the cooldown in seconds.
	TotalSeconds int32 `protobuf:"varint,1,opt,name=totalSeconds,proto3" json:"totalSeconds,omitempty"`
	// The remaining duration of the cooldown in seconds.
	RemainingSeconds int32 `protobuf:"varint,2,opt,name=remainingSeconds,proto3" json:"remainingSeconds,omitempty"`
	// The date and time when the cooldown expires in ISO 8601 format.
	Expiration *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expiration,proto3,oneof" json:"expiration,omitempty"`
}

func (x *Ship_Cooldown) Reset() {
	*x = Ship_Cooldown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Cooldown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Cooldown) ProtoMessage() {}

func (x *Ship_Cooldown) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Cooldown.ProtoReflect.Descriptor instead.
func (*Ship_Cooldown) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Ship_Cooldown) GetTotalSeconds() int32 {
	if x != nil {
		return x.TotalSeconds
	}
	return 0
}

func (x *Ship_Cooldown) GetRemainingSeconds() int32 {
	if x != nil {
		return x.RemainingSeconds
	}
	return 0
}

func (x *Ship_Cooldown) GetExpiration() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiration
	}
	return nil
}

type Ship_Cargo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The max number of items that can be stored in the cargo hold.
	Capacity int32 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The number of items currently stored in the cargo hold.
	Units     int32                       `protobuf:"varint,2,opt,name=units,proto3" json:"units,omitempty"`
	Inventory []*Ship_Cargo_InventoryItem `protobuf:"bytes,3,rep,name=inventory,proto3" json:"inventory,omitempty"`
}

func (x *Ship_Cargo) Reset() {
	*x = Ship_Cargo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Cargo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Cargo) ProtoMessage() {}

func (x *Ship_Cargo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Cargo.ProtoReflect.Descriptor instead.
func (*Ship_Cargo) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Ship_Cargo) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Ship_Cargo) GetUnits() int32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Ship_Cargo) GetInventory() []*Ship_Cargo_InventoryItem {
	if x != nil {
		return x.Inventory
	}
	return nil
}

type Ship_Fuel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum amount of fuel the ship's tanks can hold.
	Capacity int32 `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// The current amount of fuel in the ship's tanks.
	Current int32 `protobuf:"varint,2,opt,name=current,proto3" json:"current,omitempty"`
	// An object that only shows up when an action has consumed fuel in the process.
	// Shows the fuel consumption data.
	Consumed *Ship_Fuel_Consumption `protobuf:"bytes,3,opt,name=consumed,proto3,oneof" json:"consumed,omitempty"`
}

func (x *Ship_Fuel) Reset() {
	*x = Ship_Fuel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Fuel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Fuel) ProtoMessage() {}

func (x *Ship_Fuel) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Fuel.ProtoReflect.Descriptor instead.
func (*Ship_Fuel) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Ship_Fuel) GetCapacity() int32 {
	if x != nil {
		return x.Capacity
	}
	return 0
}

func (x *Ship_Fuel) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *Ship_Fuel) GetConsumed() *Ship_Fuel_Consumption {
	if x != nil {
		return x.Consumed
	}
	return nil
}

type Ship_Cargo_InventoryItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        TradeItem `protobuf:"varint,1,opt,name=type,proto3,enum=proto.TradeItem" json:"type,omitempty"`
	Name        string    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description string    `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// The number of units of the cargo item.
	Units int32 `protobuf:"varint,4,opt,name=units,proto3" json:"units,omitempty"`
}

func (x *Ship_Cargo_InventoryItem) Reset() {
	*x = Ship_Cargo_InventoryItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Cargo_InventoryItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Cargo_InventoryItem) ProtoMessage() {}

func (x *Ship_Cargo_InventoryItem) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Cargo_InventoryItem.ProtoReflect.Descriptor instead.
func (*Ship_Cargo_InventoryItem) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (x *Ship_Cargo_InventoryItem) GetType() TradeItem {
	if x != nil {
		return x.Type
	}
	return TradeItem_UNKNOWN_TRADEITEM
}

func (x *Ship_Cargo_InventoryItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Ship_Cargo_InventoryItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Ship_Cargo_InventoryItem) GetUnits() int32 {
	if x != nil {
		return x.Units
	}
	return 0
}

type Ship_Fuel_Consumption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of fuel consumed by the most recent transit or action.
	Amount int32 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The time at which the fuel was consumed.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Ship_Fuel_Consumption) Reset() {
	*x = Ship_Fuel_Consumption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ship_Fuel_Consumption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ship_Fuel_Consumption) ProtoMessage() {}

func (x *Ship_Fuel_Consumption) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ship_Fuel_Consumption.ProtoReflect.Descriptor instead.
func (*Ship_Fuel_Consumption) Descriptor() ([]byte, []int) {
	return file_server_proto_rawDescGZIP(), []int{3, 5, 0}
}

func (x *Ship_Fuel_Consumption) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Ship_Fuel_Consumption) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

var File_server_proto protoreflect.FileDescriptor

var file_server_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xd9, 0x03, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0b, 0x67, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x61, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0d, 0x61, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x1a, 0x73, 0x0a, 0x0b, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x69, 0x70, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0x38, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0xb1, 0x01, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x64, 0x71,
	0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x68,
	0x65, 0x61, 0x64, 0x71, 0x75, 0x61, 0x72, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x68, 0x69, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x05, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x05,
	0x73, 0x68, 0x69, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x52, 0x05, 0x73, 0x68, 0x69, 0x70, 0x73, 0x22,
	0xe0, 0x11, 0x0a, 0x04, 0x53, 0x68, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f,
	0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a,
	0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x77, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x2e, 0x43, 0x72, 0x65, 0x77, 0x52, 0x04, 0x63, 0x72, 0x65, 0x77, 0x12, 0x2b, 0x0a, 0x05, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x52, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x07, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x63,
	0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x6f, 0x6f, 0x6c, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x27, 0x0a,
	0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x27, 0x0a, 0x05,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x52, 0x05,
	0x63, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70,
	0x2e, 0x46, 0x75, 0x65, 0x6c, 0x52, 0x04, 0x66, 0x75, 0x65, 0x6c, 0x1a, 0x3e, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0xeb, 0x01, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x12, 0x35, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0b, 0x61,
	0x72, 0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x61, 0x72,
	0x72, 0x69, 0x76, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0xe2, 0x01, 0x0a, 0x04, 0x43, 0x72,
	0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x68, 0x69, 0x70, 0x2e, 0x43, 0x72, 0x65, 0x77, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x72, 0x61, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x6f, 0x72,
	0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x77, 0x61, 0x67, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x08, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x4c, 0x41, 0x58, 0x45, 0x44, 0x10, 0x01, 0x1a, 0xaa,
	0x01, 0x0a, 0x08, 0x43, 0x6f, 0x6f, 0x6c, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xfc, 0x01, 0x0a, 0x05,
	0x43, 0x61, 0x72, 0x67, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x43, 0x61, 0x72, 0x67, 0x6f, 0x2e, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x81, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x1a, 0xe9, 0x01, 0x0a, 0x04, 0x46,
	0x75, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x2e, 0x46, 0x75, 0x65, 0x6c, 0x2e, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x64, 0x88, 0x01, 0x01, 0x1a, 0x5f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73,
	0x75, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x48, 0x49, 0x50, 0x52,
	0x4f, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x41,
	0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x52, 0x56, 0x45, 0x53, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x41, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x4f, 0x52, 0x10,
	0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x58, 0x43, 0x41, 0x56, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x05,
	0x12, 0x0d, 0x0a, 0x09, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x52, 0x45, 0x50, 0x41, 0x49, 0x52, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x55, 0x52, 0x56, 0x45, 0x59, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45,
	0x52, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x41, 0x54, 0x52, 0x4f, 0x4c, 0x10, 0x0b, 0x12,
	0x0d, 0x0a, 0x09, 0x53, 0x41, 0x54, 0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x0c, 0x0a, 0x08,
	0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x0e, 0x22, 0x52, 0x0a, 0x0c, 0x46, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x14, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x5f, 0x4f, 0x52, 0x42, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49, 0x54, 0x10, 0x03, 0x22, 0x52,
	0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x4d, 0x4f,
	0x44, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x55, 0x49, 0x53, 0x45, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x49, 0x46, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53,
	0x54, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x52, 0x4e,
	0x10, 0x04, 0x22, 0x80, 0x01, 0x0a, 0x12, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x72, 0x65, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x63, 0x72, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x05,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x72, 0x65, 0x77, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x4e, 0x0a, 0x10, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa8, 0x05, 0x0a, 0x0e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x0b, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x67,
	0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x75, 0x65, 0x6c, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x66, 0x75, 0x65, 0x6c, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22, 0xc7, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x42,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44, 0x52, 0x4f,
	0x4e, 0x45, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x46,
	0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x52, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d,
	0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x49, 0x47, 0x41, 0x54, 0x45,
	0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x53, 0x48, 0x55, 0x54,
	0x54, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48,
	0x54, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x48,
	0x45, 0x41, 0x56, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x0b,
	0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x50,
	0x4f, 0x52, 0x54, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x44,
	0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52,
	0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x55, 0x49, 0x53, 0x45, 0x52, 0x10, 0x0e, 0x12, 0x11, 0x0a,
	0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49, 0x45, 0x52, 0x10, 0x0f,
	0x22, 0xa8, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x67, 0x72,
	0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x22, 0x8f, 0x01, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x10,
	0x04, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x54,
	0x49, 0x4d, 0x41, 0x54, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x10, 0x05, 0x22, 0x8c, 0x03, 0x0a, 0x0f,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x67, 0x72, 0x61, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x22, 0x81, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4d,
	0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x47, 0x49, 0x4e,
	0x45, 0x5f, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x48, 0x59, 0x50, 0x45, 0x52,
	0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x04, 0x22, 0xbf, 0x06, 0x0a, 0x06, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x88, 0x01, 0x01, 0x22, 0xc4,
	0x04, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x49, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53,
	0x53, 0x4f, 0x52, 0x5f, 0x49, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f,
	0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x49, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f,
	0x49, 0x49, 0x49, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x43, 0x52, 0x45, 0x57, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x10,
	0x06, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x56, 0x4f,
	0x59, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x49, 0x10, 0x07, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e, 0x47,
	0x45, 0x52, 0x5f, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x5f, 0x49, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x59,
	0x5f, 0x49, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x46,
	0x55, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x10, 0x0b,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x10, 0x0c, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x55,
	0x4d, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x0e, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x44, 0x52, 0x49,
	0x56, 0x45, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x0f, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10,
	0x10, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50,
	0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x11, 0x12, 0x19, 0x0a, 0x15, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x49, 0x49, 0x10, 0x12, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45,
	0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x49, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52,
	0x5f, 0x49, 0x49, 0x10, 0x14, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x22, 0xae, 0x05, 0x0a,
	0x05, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x08, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08, 0x64, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x22, 0x97, 0x03, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x5f,
	0x53, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x53, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49,
	0x49, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53,
	0x5f, 0x53, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x4f, 0x52, 0x5f,
	0x49, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x52,
	0x56, 0x45, 0x59, 0x4f, 0x52, 0x5f, 0x49, 0x49, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x4f, 0x52, 0x5f, 0x49, 0x49, 0x49,
	0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53,
	0x4f, 0x52, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x49, 0x49, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x49,
	0x49, 0x10, 0x09, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e,
	0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x10, 0x0a, 0x12, 0x19, 0x0a,
	0x15, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41,
	0x53, 0x45, 0x52, 0x5f, 0x49, 0x49, 0x10, 0x0b, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x55, 0x4e,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x49,
	0x49, 0x49, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x41,
	0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e, 0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x0d, 0x12, 0x1c,
	0x0a, 0x18, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4c, 0x45, 0x5f,
	0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45, 0x52, 0x5f, 0x49, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x49, 0x10, 0x0f,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22, 0x8f, 0x03,
	0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x77, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x52, 0x09, 0x77, 0x61,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x55, 0x54, 0x52, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x52, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x44, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x55, 0x45, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x59, 0x4f, 0x55, 0x4e, 0x47, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x48, 0x49, 0x54, 0x45, 0x5f, 0x44, 0x57,
	0x41, 0x52, 0x46, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x4c, 0x41, 0x43, 0x4b, 0x5f, 0x48,
	0x4f, 0x4c, 0x45, 0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x59, 0x50, 0x45, 0x52, 0x47, 0x49,
	0x41, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41, 0x10,
	0x09, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x4e, 0x53, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x0a, 0x22,
	0x99, 0x03, 0x0a, 0x0c, 0x57, 0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x61, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x61, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x01, 0x79, 0x22, 0x96, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x57, 0x41, 0x59, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x54,
	0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x4c, 0x41, 0x4e, 0x45, 0x54, 0x10,
	0x01, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x41, 0x53, 0x5f, 0x47, 0x49, 0x41, 0x4e, 0x54, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4d, 0x4f, 0x4f, 0x4e, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x52,
	0x42, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x47, 0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x41, 0x53, 0x54, 0x45, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44,
	0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x53, 0x54, 0x45, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x07,
	0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x45, 0x52, 0x45, 0x44, 0x5f, 0x41,
	0x53, 0x54, 0x45, 0x52, 0x4f, 0x49, 0x44, 0x10, 0x08, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x53, 0x54,
	0x45, 0x52, 0x4f, 0x49, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06,
	0x4e, 0x45, 0x42, 0x55, 0x4c, 0x41, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x45, 0x42, 0x52,
	0x49, 0x53, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52,
	0x41, 0x56, 0x49, 0x54, 0x59, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x0c, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x41, 0x56, 0x49,
	0x54, 0x59, 0x5f, 0x57, 0x45, 0x4c, 0x4c, 0x10, 0x0d, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x55, 0x45,
	0x4c, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0e, 0x2a, 0x87, 0x02, 0x0a, 0x07,
	0x46, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x4f, 0x53, 0x4d, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x49, 0x44,
	0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x41, 0x4c, 0x41, 0x43, 0x54, 0x49, 0x43, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x4f, 0x4d, 0x49, 0x4e, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x41,
	0x53, 0x54, 0x52, 0x4f, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x52, 0x53, 0x41, 0x49,
	0x52, 0x53, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x42, 0x53, 0x49, 0x44, 0x49, 0x41, 0x4e,
	0x10, 0x08, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x45, 0x47, 0x49, 0x53, 0x10, 0x09, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x4e, 0x49, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4f, 0x4c,
	0x49, 0x54, 0x41, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f, 0x42, 0x41, 0x4c,
	0x44, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x4d, 0x45, 0x47, 0x41, 0x10, 0x0d, 0x12, 0x08,
	0x0a, 0x04, 0x45, 0x43, 0x48, 0x4f, 0x10, 0x0e, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x52, 0x44,
	0x53, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x55, 0x4c, 0x54, 0x10, 0x10, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x4e, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x11, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x48, 0x41, 0x44, 0x4f, 0x57, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x54, 0x48, 0x45, 0x52,
	0x45, 0x41, 0x4c, 0x10, 0x13, 0x2a, 0xcd, 0x17, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54,
	0x52, 0x41, 0x44, 0x45, 0x49, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52,
	0x45, 0x43, 0x49, 0x4f, 0x55, 0x53, 0x5f, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x53, 0x10, 0x01, 0x12,
	0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x52, 0x54, 0x5a, 0x5f, 0x53, 0x41, 0x4e, 0x44, 0x10, 0x02,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x4c, 0x49, 0x43, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x59, 0x53,
	0x54, 0x41, 0x4c, 0x53, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4d, 0x4d, 0x4f, 0x4e, 0x49,
	0x41, 0x5f, 0x49, 0x43, 0x45, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x49, 0x51, 0x55, 0x49,
	0x44, 0x5f, 0x48, 0x59, 0x44, 0x52, 0x4f, 0x47, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f,
	0x4c, 0x49, 0x51, 0x55, 0x49, 0x44, 0x5f, 0x4e, 0x49, 0x54, 0x52, 0x4f, 0x47, 0x45, 0x4e, 0x10,
	0x06, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x43, 0x45, 0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x45, 0x58, 0x4f, 0x54, 0x49, 0x43, 0x5f, 0x4d, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x5f,
	0x43, 0x49, 0x52, 0x43, 0x55, 0x49, 0x54, 0x52, 0x59, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x47,
	0x52, 0x41, 0x56, 0x49, 0x54, 0x4f, 0x4e, 0x5f, 0x45, 0x4d, 0x49, 0x54, 0x54, 0x45, 0x52, 0x53,
	0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x52, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08,
	0x49, 0x52, 0x4f, 0x4e, 0x5f, 0x4f, 0x52, 0x45, 0x10, 0x0c, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x50, 0x50, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x50, 0x50, 0x45, 0x52,
	0x5f, 0x4f, 0x52, 0x45, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x55, 0x4d, 0x49, 0x4e,
	0x55, 0x4d, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x4c, 0x55, 0x4d, 0x49, 0x4e, 0x55, 0x4d,
	0x5f, 0x4f, 0x52, 0x45, 0x10, 0x10, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52,
	0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x49, 0x4c, 0x56, 0x45, 0x52, 0x5f, 0x4f, 0x52, 0x45,
	0x10, 0x12, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x4f, 0x4c, 0x44, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08,
	0x47, 0x4f, 0x4c, 0x44, 0x5f, 0x4f, 0x52, 0x45, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c,
	0x41, 0x54, 0x49, 0x4e, 0x55, 0x4d, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4c, 0x41, 0x54,
	0x49, 0x4e, 0x55, 0x4d, 0x5f, 0x4f, 0x52, 0x45, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49,
	0x41, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x17, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x52, 0x41, 0x4e,
	0x49, 0x54, 0x45, 0x10, 0x18, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x52, 0x41, 0x4e, 0x49, 0x54, 0x45,
	0x5f, 0x4f, 0x52, 0x45, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x52, 0x49, 0x54, 0x49,
	0x55, 0x4d, 0x10, 0x1a, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x45, 0x52, 0x49, 0x54, 0x49, 0x55, 0x4d,
	0x5f, 0x4f, 0x52, 0x45, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x59, 0x44, 0x52, 0x4f, 0x43,
	0x41, 0x52, 0x42, 0x4f, 0x4e, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4e, 0x54, 0x49, 0x4d,
	0x41, 0x54, 0x54, 0x45, 0x52, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x41, 0x42, 0x5f, 0x4d,
	0x41, 0x54, 0x53, 0x10, 0x1e, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x52, 0x54, 0x49, 0x4c, 0x49,
	0x5a, 0x45, 0x52, 0x53, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43,
	0x53, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4f, 0x4f, 0x44, 0x10, 0x21, 0x12, 0x0b, 0x0a,
	0x07, 0x4a, 0x45, 0x57, 0x45, 0x4c, 0x52, 0x59, 0x10, 0x22, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x41,
	0x43, 0x48, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x10, 0x23, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52,
	0x45, 0x41, 0x52, 0x4d, 0x53, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x53, 0x53, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x53, 0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x4d,
	0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x53, 0x49, 0x56, 0x45,
	0x53, 0x10, 0x27, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41, 0x42, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x28, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x4d, 0x4d, 0x55,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c, 0x45, 0x43,
	0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x53, 0x10, 0x2a, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x48, 0x49,
	0x50, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x53, 0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2d, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x55,
	0x45, 0x4c, 0x10, 0x2e, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x45, 0x44, 0x49, 0x43, 0x49, 0x4e, 0x45,
	0x10, 0x2f, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x52, 0x55, 0x47, 0x53, 0x10, 0x30, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4c, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x49, 0x43, 0x52, 0x4f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x53, 0x10, 0x32,
	0x12, 0x0c, 0x0a, 0x08, 0x50, 0x4c, 0x41, 0x53, 0x54, 0x49, 0x43, 0x53, 0x10, 0x33, 0x12, 0x13,
	0x0a, 0x0f, 0x50, 0x4f, 0x4c, 0x59, 0x4e, 0x55, 0x43, 0x4c, 0x45, 0x4f, 0x54, 0x49, 0x44, 0x45,
	0x53, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x49, 0x4f, 0x43, 0x4f, 0x4d, 0x50, 0x4f, 0x53,
	0x49, 0x54, 0x45, 0x53, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55,
	0x4d, 0x5f, 0x53, 0x54, 0x41, 0x42, 0x49, 0x4c, 0x49, 0x5a, 0x45, 0x52, 0x53, 0x10, 0x36, 0x12,
	0x0c, 0x0a, 0x08, 0x4e, 0x41, 0x4e, 0x4f, 0x42, 0x4f, 0x54, 0x53, 0x10, 0x37, 0x12, 0x11, 0x0a,
	0x0d, 0x41, 0x49, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x53, 0x10, 0x38,
	0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x44, 0x52, 0x49, 0x56,
	0x45, 0x53, 0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x42, 0x4f, 0x54, 0x49, 0x43, 0x5f,
	0x44, 0x52, 0x4f, 0x4e, 0x45, 0x53, 0x10, 0x3a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x59, 0x42, 0x45,
	0x52, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x41, 0x4e, 0x54, 0x53, 0x10, 0x3b, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x45, 0x4e, 0x45, 0x5f, 0x54, 0x48, 0x45, 0x52, 0x41, 0x50, 0x45, 0x55, 0x54, 0x49, 0x43,
	0x53, 0x10, 0x3c, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x45, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x48,
	0x49, 0x50, 0x53, 0x10, 0x3d, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x4f, 0x44, 0x5f, 0x52, 0x45,
	0x47, 0x55, 0x4c, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x3e, 0x12, 0x10, 0x0a, 0x0c, 0x56, 0x49,
	0x52, 0x41, 0x4c, 0x5f, 0x41, 0x47, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x3f, 0x12, 0x1b, 0x0a, 0x17,
	0x4d, 0x49, 0x43, 0x52, 0x4f, 0x5f, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x53, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x50,
	0x45, 0x52, 0x47, 0x52, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x41, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x41,
	0x53, 0x45, 0x52, 0x5f, 0x52, 0x49, 0x46, 0x4c, 0x45, 0x53, 0x10, 0x42, 0x12, 0x10, 0x0a, 0x0c,
	0x48, 0x4f, 0x4c, 0x4f, 0x47, 0x52, 0x41, 0x50, 0x48, 0x49, 0x43, 0x53, 0x10, 0x43, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x41, 0x4c, 0x56, 0x41, 0x47, 0x45, 0x10, 0x44,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x4c, 0x49, 0x43, 0x5f, 0x54, 0x45, 0x43, 0x48, 0x10, 0x45,
	0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x56, 0x45, 0x4c, 0x5f, 0x4c, 0x49, 0x46, 0x45, 0x46, 0x4f,
	0x52, 0x4d, 0x53, 0x10, 0x46, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4f, 0x54, 0x41, 0x4e, 0x49, 0x43,
	0x41, 0x4c, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x4d, 0x45, 0x4e, 0x53, 0x10, 0x47, 0x12, 0x16,
	0x0a, 0x12, 0x43, 0x55, 0x4c, 0x54, 0x55, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x52, 0x54, 0x49, 0x46,
	0x41, 0x43, 0x54, 0x53, 0x10, 0x48, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x49, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45,
	0x5f, 0x44, 0x52, 0x4f, 0x4e, 0x45, 0x10, 0x4a, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x41, 0x4d,
	0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x4f, 0x52, 0x10, 0x4b, 0x12,
	0x0f, 0x0a, 0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x43, 0x45, 0x52, 0x10, 0x4c,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x45,
	0x52, 0x10, 0x4d, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x46, 0x52, 0x49,
	0x47, 0x41, 0x54, 0x45, 0x10, 0x4e, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f,
	0x53, 0x48, 0x55, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x4f, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x50, 0x12, 0x0f, 0x0a,
	0x0b, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x10, 0x51, 0x12, 0x19,
	0x0a, 0x15, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x46, 0x52,
	0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x52, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x52, 0x10, 0x53, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x54, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x41,
	0x4d, 0x45, 0x5f, 0x44, 0x45, 0x53, 0x54, 0x52, 0x4f, 0x59, 0x45, 0x52, 0x10, 0x55, 0x12, 0x11,
	0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x52, 0x55, 0x49, 0x53, 0x45, 0x52, 0x10,
	0x56, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x52, 0x49,
	0x45, 0x52, 0x10, 0x57, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f,
	0x53, 0x4f, 0x4c, 0x41, 0x52, 0x5f, 0x49, 0x10, 0x58, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x59, 0x12,
	0x15, 0x0a, 0x11, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x53, 0x53, 0x49,
	0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x5a, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f,
	0x52, 0x5f, 0x43, 0x48, 0x45, 0x4d, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x49, 0x10, 0x5b, 0x12, 0x18,
	0x0a, 0x14, 0x52, 0x45, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x41, 0x4e, 0x54, 0x49, 0x4d, 0x41,
	0x54, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x10, 0x5c, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x47, 0x49,
	0x4e, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x55, 0x4c, 0x53, 0x45, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x10, 0x5d, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x5e, 0x12, 0x17, 0x0a, 0x13,
	0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45,
	0x5f, 0x49, 0x49, 0x10, 0x5f, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f,
	0x48, 0x59, 0x50, 0x45, 0x52, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x60, 0x12,
	0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x4e, 0x45, 0x52, 0x41,
	0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x49, 0x10, 0x61, 0x12,
	0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x50, 0x52,
	0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f, 0x52, 0x5f, 0x49, 0x10, 0x62, 0x12, 0x17, 0x0a, 0x13, 0x4d,
	0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44,
	0x5f, 0x49, 0x10, 0x63, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43,
	0x41, 0x52, 0x47, 0x4f, 0x5f, 0x48, 0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x49, 0x10, 0x64, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x5f, 0x48,
	0x4f, 0x4c, 0x44, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x4f, 0x44,
	0x55, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x57, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52,
	0x53, 0x5f, 0x49, 0x10, 0x66, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x45, 0x4e, 0x56, 0x4f, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x53, 0x5f, 0x49,
	0x10, 0x67, 0x12, 0x1c, 0x0a, 0x18, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x50, 0x41, 0x53,
	0x53, 0x45, 0x4e, 0x47, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x42, 0x49, 0x4e, 0x5f, 0x49, 0x10, 0x68,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x10, 0x69, 0x12, 0x18, 0x0a,
	0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x43, 0x49, 0x45, 0x4e, 0x43, 0x45, 0x5f,
	0x4c, 0x41, 0x42, 0x5f, 0x49, 0x10, 0x6a, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c,
	0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x6b,
	0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f,
	0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x6c, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f,
	0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4a, 0x55, 0x4d, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f,
	0x49, 0x49, 0x49, 0x10, 0x6d, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f,
	0x57, 0x41, 0x52, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x10, 0x6e, 0x12, 0x18,
	0x0a, 0x14, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x44, 0x52,
	0x49, 0x56, 0x45, 0x5f, 0x49, 0x49, 0x10, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55,
	0x4c, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x50, 0x5f, 0x44, 0x52, 0x49, 0x56, 0x45, 0x5f, 0x49, 0x49,
	0x49, 0x10, 0x70, 0x12, 0x1d, 0x0a, 0x19, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x48,
	0x49, 0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49,
	0x10, 0x71, 0x12, 0x1e, 0x0a, 0x1a, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x53, 0x48, 0x49,
	0x45, 0x4c, 0x44, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x49,
	0x10, 0x72, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x4f, 0x52, 0x45,
	0x5f, 0x52, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x10, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x45, 0x4c, 0x5f, 0x52, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x10, 0x74, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x53, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49, 0x10,
	0x75, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x53,
	0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49, 0x49, 0x10, 0x76, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x47, 0x41, 0x53, 0x5f, 0x53, 0x49, 0x50, 0x48, 0x4f, 0x4e, 0x5f, 0x49,
	0x49, 0x49, 0x10, 0x77, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x52, 0x56, 0x45, 0x59, 0x4f, 0x52, 0x5f, 0x49, 0x10, 0x78, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59, 0x4f, 0x52, 0x5f, 0x49, 0x49, 0x10,
	0x79, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45,
	0x59, 0x4f, 0x52, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x7a, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f, 0x55,
	0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f,
	0x49, 0x10, 0x7b, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e,
	0x53, 0x4f, 0x52, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x49, 0x10, 0x7c, 0x12, 0x1a,
	0x0a, 0x16, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x4f, 0x52, 0x5f, 0x41,
	0x52, 0x52, 0x41, 0x59, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x7d, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x4f,
	0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52,
	0x5f, 0x49, 0x10, 0x7e, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x49, 0x10, 0x7f, 0x12,
	0x1b, 0x0a, 0x16, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f,
	0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x49, 0x49, 0x10, 0x80, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4e, 0x4e,
	0x4f, 0x4e, 0x5f, 0x49, 0x10, 0x81, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x4d, 0x4f, 0x55, 0x4e, 0x54,
	0x5f, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4c, 0x45, 0x5f, 0x4c, 0x41, 0x55, 0x4e, 0x43, 0x48, 0x45,
	0x52, 0x5f, 0x49, 0x10, 0x82, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x4d, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x54, 0x55, 0x52, 0x52, 0x45, 0x54, 0x5f, 0x49, 0x10, 0x83, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a, 0x11,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x52, 0x4f, 0x4e,
	0x45, 0x10, 0x85, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x49, 0x50,
	0x48, 0x4f, 0x4e, 0x5f, 0x44, 0x52, 0x4f, 0x4e, 0x45, 0x10, 0x86, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x53, 0x48, 0x49, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x45, 0x50, 0x54, 0x4f, 0x52,
	0x10, 0x87, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4c, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x48, 0x41, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x88, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x48, 0x49, 0x50, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x52, 0x49, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x89, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x52, 0x45, 0x52, 0x10, 0x8a, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x48,
	0x49, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x56, 0x59, 0x5f, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x52, 0x10, 0x8b, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4c, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x8c, 0x01, 0x12, 0x13,
	0x0a, 0x0e, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x4f, 0x52, 0x45, 0x5f, 0x48, 0x4f, 0x55, 0x4e, 0x44,
	0x10, 0x8d, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x52, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x45, 0x49, 0x47, 0x48, 0x54, 0x45, 0x52, 0x10, 0x8e,
	0x01, 0x12, 0x12, 0x0a, 0x0d, 0x53, 0x48, 0x49, 0x50, 0x5f, 0x53, 0x55, 0x52, 0x56, 0x45, 0x59,
	0x4f, 0x52, 0x10, 0x8f, 0x01, 0x32, 0xf8, 0x01, 0x0a, 0x13, 0x53, 0x70, 0x61, 0x63, 0x65, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x37, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x65, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x6c, 0x65, 0x65, 0x74,
	0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73,
	0x74, 0x6e, 0x6f, 0x6b, 0x6f, 0x74, 0x74, 0x2f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_rawDescOnce sync.Once
	file_server_proto_rawDescData = file_server_proto_rawDesc
)

func file_server_proto_rawDescGZIP() []byte {
	file_server_proto_rawDescOnce.Do(func() {
		file_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_rawDescData)
	})
	return file_server_proto_rawDescData
}

var file_server_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_server_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_server_proto_goTypes = []any{
	(Faction)(0),                      // 0: proto.Faction
	(TradeItem)(0),                    // 1: proto.TradeItem
	(Ship_Role)(0),                    // 2: proto.Ship.Role
	(Ship_FlightStatus)(0),            // 3: proto.Ship.FlightStatus
	(Ship_FlightMode)(0),              // 4: proto.Ship.FlightMode
	(Ship_Crew_Rotation)(0),           // 5: proto.Ship.Crew.Rotation
	(FrameComponent_Type)(0),          // 6: proto.FrameComponent.Type
	(ReactorComponent_Type)(0),        // 7: proto.ReactorComponent.Type
	(EngineComponent_Type)(0),         // 8: proto.EngineComponent.Type
	(Module_Type)(0),                  // 9: proto.Module.Type
	(Mount_Type)(0),                   // 10: proto.Mount.Type
	(System_Type)(0),                  // 11: proto.System.Type
	(WaypointBase_Type)(0),            // 12: proto.WaypointBase.Type
	(*ServerStatus)(nil),              // 13: proto.ServerStatus
	(*Agent)(nil),                     // 14: proto.Agent
	(*Fleet)(nil),                     // 15: proto.Fleet
	(*Ship)(nil),                      // 16: proto.Ship
	(*ModuleRequirements)(nil),        // 17: proto.ModuleRequirements
	(*ModuleDegradable)(nil),          // 18: proto.ModuleDegradable
	(*FrameComponent)(nil),            // 19: proto.FrameComponent
	(*ReactorComponent)(nil),          // 20: proto.ReactorComponent
	(*EngineComponent)(nil),           // 21: proto.EngineComponent
	(*Module)(nil),                    // 22: proto.Module
	(*Mount)(nil),                     // 23: proto.Mount
	(*System)(nil),                    // 24: proto.System
	(*WaypointBase)(nil),              // 25: proto.WaypointBase
	(*ServerStatus_GlobalStats)(nil),  // 26: proto.ServerStatus.GlobalStats
	(*ServerStatus_Announcement)(nil), // 27: proto.ServerStatus.Announcement
	(*Ship_Location)(nil),             // 28: proto.Ship.Location
	(*Ship_Route)(nil),                // 29: proto.Ship.Route
	(*Ship_Crew)(nil),                 // 30: proto.Ship.Crew
	(*Ship_Cooldown)(nil),             // 31: proto.Ship.Cooldown
	(*Ship_Cargo)(nil),                // 32: proto.Ship.Cargo
	(*Ship_Fuel)(nil),                 // 33: proto.Ship.Fuel
	(*Ship_Cargo_InventoryItem)(nil),  // 34: proto.Ship.Cargo.InventoryItem
	(*Ship_Fuel_Consumption)(nil),     // 35: proto.Ship.Fuel.Consumption
	(*timestamppb.Timestamp)(nil),     // 36: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),             // 37: google.protobuf.Empty
}
var file_server_proto_depIdxs = []int32{
	36, // 0: proto.ServerStatus.last_reset:type_name -> google.protobuf.Timestamp
	36, // 1: proto.ServerStatus.next_reset:type_name -> google.protobuf.Timestamp
	26, // 2: proto.ServerStatus.global_stats:type_name -> proto.ServerStatus.GlobalStats
	27, // 3: proto.ServerStatus.announcements:type_name -> proto.ServerStatus.Announcement
	0,  // 4: proto.Agent.startingFaction:type_name -> proto.Faction
	16, // 5: proto.Fleet.ships:type_name -> proto.Ship
	2,  // 6: proto.Ship.role:type_name -> proto.Ship.Role
	28, // 7: proto.Ship.currentLocation:type_name -> proto.Ship.Location
	29, // 8: proto.Ship.route:type_name -> proto.Ship.Route
	3,  // 9: proto.Ship.status:type_name -> proto.Ship.FlightStatus
	4,  // 10: proto.Ship.flightMode:type_name -> proto.Ship.FlightMode
	30, // 11: proto.Ship.crew:type_name -> proto.Ship.Crew
	19, // 12: proto.Ship.frame:type_name -> proto.FrameComponent
	20, // 13: proto.Ship.reactor:type_name -> proto.ReactorComponent
	21, // 14: proto.Ship.engine:type_name -> proto.EngineComponent
	31, // 15: proto.Ship.cooldown:type_name -> proto.Ship.Cooldown
	22, // 16: proto.Ship.modules:type_name -> proto.Module
	23, // 17: proto.Ship.mounts:type_name -> proto.Mount
	32, // 18: proto.Ship.cargo:type_name -> proto.Ship.Cargo
	33, // 19: proto.Ship.fuel:type_name -> proto.Ship.Fuel
	17, // 20: proto.FrameComponent.requirements:type_name -> proto.ModuleRequirements
	6,  // 21: proto.FrameComponent.type:type_name -> proto.FrameComponent.Type
	18, // 22: proto.FrameComponent.degradation:type_name -> proto.ModuleDegradable
	17, // 23: proto.ReactorComponent.requirements:type_name -> proto.ModuleRequirements
	7,  // 24: proto.ReactorComponent.type:type_name -> proto.ReactorComponent.Type
	18, // 25: proto.ReactorComponent.degradation:type_name -> proto.ModuleDegradable
	17, // 26: proto.EngineComponent.requirements:type_name -> proto.ModuleRequirements
	8,  // 27: proto.EngineComponent.type:type_name -> proto.EngineComponent.Type
	18, // 28: proto.EngineComponent.degradation:type_name -> proto.ModuleDegradable
	17, // 29: proto.Module.requirements:type_name -> proto.ModuleRequirements
	9,  // 30: proto.Module.type:type_name -> proto.Module.Type
	17, // 31: proto.Mount.requirements:type_name -> proto.ModuleRequirements
	10, // 32: proto.Mount.type:type_name -> proto.Mount.Type
	1,  // 33: proto.Mount.deposits:type_name -> proto.TradeItem
	11, // 34: proto.System.type:type_name -> proto.System.Type
	25, // 35: proto.System.waypoints:type_name -> proto.WaypointBase
	0,  // 36: proto.System.factions:type_name -> proto.Faction
	12, // 37: proto.WaypointBase.type:type_name -> proto.WaypointBase.Type
	25, // 38: proto.Ship.Route.origin:type_name -> proto.WaypointBase
	25, // 39: proto.Ship.Route.destination:type_name -> proto.WaypointBase
	36, // 40: proto.Ship.Route.departureTime:type_name -> google.protobuf.Timestamp
	36, // 41: proto.Ship.Route.arrivalTime:type_name -> google.protobuf.Timestamp
	5,  // 42: proto.Ship.Crew.rotation:type_name -> proto.Ship.Crew.Rotation
	36, // 43: proto.Ship.Cooldown.expiration:type_name -> google.protobuf.Timestamp
	34, // 44: proto.Ship.Cargo.inventory:type_name -> proto.Ship.Cargo.InventoryItem
	35, // 45: proto.Ship.Fuel.consumed:type_name -> proto.Ship.Fuel.Consumption
	1,  // 46: proto.Ship.Cargo.InventoryItem.type:type_name -> proto.TradeItem
	36, // 47: proto.Ship.Fuel.Consumption.timestamp:type_name -> google.protobuf.Timestamp
	37, // 48: proto.SpaceTradersService.Ping:input_type -> google.protobuf.Empty
	37, // 49: proto.SpaceTradersService.GetServerStatus:input_type -> google.protobuf.Empty
	37, // 50: proto.SpaceTradersService.GetCurrentAgent:input_type -> google.protobuf.Empty
	37, // 51: proto.SpaceTradersService.GetFleet:input_type -> google.protobuf.Empty
	37, // 52: proto.SpaceTradersService.Ping:output_type -> google.protobuf.Empty
	13, // 53: proto.SpaceTradersService.GetServerStatus:output_type -> proto.ServerStatus
	14, // 54: proto.SpaceTradersService.GetCurrentAgent:output_type -> proto.Agent
	15, // 55: proto.SpaceTradersService.GetFleet:output_type -> proto.Fleet
	52, // [52:56] is the sub-list for method output_type
	48, // [48:52] is the sub-list for method input_type
	48, // [48:48] is the sub-list for extension type_name
	48, // [48:48] is the sub-list for extension extendee
	0,  // [0:48] is the sub-list for field type_name
}

func init() { file_server_proto_init() }
func file_server_proto_init() {
	if File_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_server_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ServerStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Fleet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Ship); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ModuleRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*ModuleDegradable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FrameComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ReactorComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*EngineComponent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*Mount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*System); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*WaypointBase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ServerStatus_GlobalStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ServerStatus_Announcement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Crew); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Cooldown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Cargo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Fuel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Cargo_InventoryItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_server_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*Ship_Fuel_Consumption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_server_proto_msgTypes[4].OneofWrappers = []any{}
	file_server_proto_msgTypes[9].OneofWrappers = []any{}
	file_server_proto_msgTypes[10].OneofWrappers = []any{}
	file_server_proto_msgTypes[18].OneofWrappers = []any{}
	file_server_proto_msgTypes[20].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_goTypes,
		DependencyIndexes: file_server_proto_depIdxs,
		EnumInfos:         file_server_proto_enumTypes,
		MessageInfos:      file_server_proto_msgTypes,
	}.Build()
	File_server_proto = out.File
	file_server_proto_rawDesc = nil
	file_server_proto_goTypes = nil
	file_server_proto_depIdxs = nil
}
